{"ast":null,"code":"// Mock data generator for realistic social media profiles\nexport class SocialMediaMockAPI {\n  generateRealisticMetrics(platform, isBot = false) {\n    const baseMetrics = {\n      instagram: {\n        minFollowers: 100,\n        maxFollowers: 50000,\n        engagementRate: 3.5\n      },\n      tiktok: {\n        minFollowers: 50,\n        maxFollowers: 100000,\n        engagementRate: 8.2\n      },\n      youtube: {\n        minFollowers: 500,\n        maxFollowers: 25000,\n        engagementRate: 2.1\n      },\n      twitter: {\n        minFollowers: 200,\n        maxFollowers: 75000,\n        engagementRate: 1.8\n      }\n    };\n    const base = baseMetrics[platform];\n    if (isBot) {\n      // Bot accounts typically have suspicious patterns\n      return {\n        followers: Math.floor(Math.random() * (base.maxFollowers - base.minFollowers)) + base.minFollowers,\n        following: Math.floor(Math.random() * 5000) + 2000,\n        // Bots often follow many accounts\n        engagementRate: Math.random() * 0.5 + 0.1,\n        // Very low engagement\n        postsPerDay: Math.random() * 20 + 10,\n        // Posting too frequently\n        accountAge: Math.floor(Math.random() * 90) + 1,\n        // Recent accounts\n        profileCompleteness: Math.random() * 40 + 20 // Incomplete profiles\n      };\n    } else {\n      // Legitimate accounts have more organic patterns\n      return {\n        followers: Math.floor(Math.random() * (base.maxFollowers - base.minFollowers)) + base.minFollowers,\n        following: Math.floor(Math.random() * 1000) + 100,\n        engagementRate: base.engagementRate + (Math.random() * 2 - 1),\n        postsPerDay: Math.random() * 3 + 0.5,\n        accountAge: Math.floor(Math.random() * 1800) + 180,\n        // Older accounts\n        profileCompleteness: Math.random() * 30 + 70 // More complete profiles\n      };\n    }\n  }\n  generateBotPatterns(handle) {\n    // Simulate bot detection based on handle patterns\n    const botIndicators = [/\\d{4,}$/,\n    // Ends with 4+ numbers\n    /^[a-z]+\\d+[a-z]+\\d+/,\n    // Mixed letters and numbers\n    /[a-z]{2,3}\\d{2,3}[a-z]{2,3}/,\n    // Pattern like \"ab12cd\"\n    /_\\d+_/,\n    // Underscores with numbers\n    /^(user|account|profile)\\d+/i // Generic names with numbers\n    ];\n    return botIndicators.some(pattern => pattern.test(handle));\n  }\n  async fetchProfile(account) {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, Math.random() * 2000 + 500));\n    const isLikelyBot = this.generateBotPatterns(account.handle);\n    const metrics = this.generateRealisticMetrics(account.platform, isLikelyBot);\n\n    // Generate realistic profile data\n    const profile = {\n      handle: account.handle,\n      displayName: this.generateDisplayName(account.handle, isLikelyBot),\n      bio: this.generateBio(isLikelyBot),\n      profileImageUrl: `https://api.dicebear.com/7.x/avataaars/svg?seed=${account.handle}`,\n      isVerified: !isLikelyBot && Math.random() > 0.95,\n      // Only 5% of legitimate accounts are verified\n      followers: Math.floor(metrics.followers),\n      following: Math.floor(metrics.following),\n      posts: Math.floor(metrics.postsPerDay * metrics.accountAge),\n      accountCreated: new Date(Date.now() - metrics.accountAge * 24 * 60 * 60 * 1000),\n      lastPost: new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000),\n      recentPosts: this.generateRecentPosts(account.platform, isLikelyBot, Math.floor(metrics.followers), metrics.engagementRate)\n    };\n    return profile;\n  }\n  generateDisplayName(handle, isBot) {\n    if (isBot) {\n      // Bots often have generic or copy-paste names\n      const genericNames = ['Social User', 'Content Creator', 'Digital Marketer', 'Lifestyle Blogger', 'Tech Enthusiast', 'Fashion Lover', 'Travel Addict', 'Fitness Guru'];\n      return Math.random() > 0.3 ? genericNames[Math.floor(Math.random() * genericNames.length)] : handle;\n    } else {\n      // Legitimate accounts have more personalized names\n      const realNames = ['Sarah Johnson', 'Mike Chen', 'Emma Rodriguez', 'Alex Thompson', 'Jordan Williams', 'Casey Miller', 'Taylor Davis', 'Morgan Lee'];\n      return Math.random() > 0.6 ? realNames[Math.floor(Math.random() * realNames.length)] : handle;\n    }\n  }\n  generateBio(isBot) {\n    if (isBot) {\n      const botBios = ['🌟 Follow for daily motivation! Link in bio 👇', '💯 Entrepreneur | DM for collaboration', 'Lifestyle content creator ✨ Check my latest post!', '🔥 Follow back guaranteed! Link below 👇', ''];\n      return botBios[Math.floor(Math.random() * botBios.length)];\n    } else {\n      const realBios = ['Coffee enthusiast ☕ | Dog mom 🐕 | Weekend hiker', 'Software developer by day, photographer by weekend 📸', 'Plant parent 🌱 | Bookworm 📚 | NYC', 'Travel memories & food adventures 🌍✈️', 'Yoga teacher | Mindfulness coach | Spreading good vibes ✨'];\n      return realBios[Math.floor(Math.random() * realBios.length)];\n    }\n  }\n  generateRecentPosts(platform, isBot, followers, engagementRate) {\n    const postCount = Math.floor(Math.random() * 10) + 5;\n    const posts = [];\n    for (let i = 0; i < postCount; i++) {\n      const dayOffset = i * Math.random() * 3;\n      const likes = Math.floor(followers * (engagementRate / 100) * (Math.random() * 0.5 + 0.75));\n      const comments = Math.floor(likes * 0.1 * Math.random());\n      const shares = Math.floor(likes * 0.05 * Math.random());\n      posts.push({\n        id: `post_${Date.now()}_${i}`,\n        content: this.generatePostContent(platform, isBot),\n        likes: isBot ? Math.floor(likes * 0.1) : likes,\n        // Bots get much less engagement\n        comments: isBot ? Math.floor(comments * 0.1) : comments,\n        shares: isBot ? Math.floor(shares * 0.1) : shares,\n        timestamp: new Date(Date.now() - dayOffset * 24 * 60 * 60 * 1000)\n      });\n    }\n    return posts;\n  }\n  generatePostContent(platform, isBot) {\n    if (isBot) {\n      const botContent = ['Amazing opportunity! Check link in bio! 💰🔥', 'Follow for more content like this! ⭐', 'DM me for collaboration! 📩💯', 'Link in bio for exclusive content! 👆✨', 'Don\\'t miss out! Follow now! 🚀'];\n      return botContent[Math.floor(Math.random() * botContent.length)];\n    } else {\n      const platforms = {\n        instagram: ['Perfect Sunday morning vibes ☕️ #weekend', 'Trying out this new recipe today! Wish me luck 👩‍🍳', 'Beautiful sunset from my evening walk 🌅', 'Coffee shop discoveries never get old ☕️📚'],\n        tiktok: ['When you finally nail that dance trend 💃', 'POV: You\\'re trying to be productive but...', 'This life hack actually works! 🤯', 'Rating viral food trends so you don\\'t have to'],\n        youtube: ['New video is live! Thanks for all the support ❤️', 'Behind the scenes of yesterday\\'s shoot 🎬', 'Q&A video coming next week! Drop your questions below', 'Celebrating 10K subscribers! Thank you all! 🎉'],\n        twitter: ['Hot take: pineapple on pizza is actually good 🍍🍕', 'Just finished an amazing book recommendation thread 📚', 'Monday motivation: small progress is still progress', 'Unpopular opinion but I actually love rainy days ☔']\n      };\n      const content = platforms[platform] || platforms.instagram;\n      return content[Math.floor(Math.random() * content.length)];\n    }\n  }\n\n  // Simulate rate limiting and errors\n  async fetchWithRealism(account) {\n    // Simulate occasional API errors\n    if (Math.random() < 0.05) {\n      // 5% error rate\n      throw new Error(`${account.platform} API rate limit exceeded`);\n    }\n    if (Math.random() < 0.02) {\n      // 2% account not found\n      throw new Error(`Account ${account.handle} not found on ${account.platform}`);\n    }\n    return this.fetchProfile(account);\n  }\n}\nexport const socialMediaAPI = new SocialMediaMockAPI();","map":{"version":3,"names":["SocialMediaMockAPI","generateRealisticMetrics","platform","isBot","baseMetrics","instagram","minFollowers","maxFollowers","engagementRate","tiktok","youtube","twitter","base","followers","Math","floor","random","following","postsPerDay","accountAge","profileCompleteness","generateBotPatterns","handle","botIndicators","some","pattern","test","fetchProfile","account","Promise","resolve","setTimeout","isLikelyBot","metrics","profile","displayName","generateDisplayName","bio","generateBio","profileImageUrl","isVerified","posts","accountCreated","Date","now","lastPost","recentPosts","generateRecentPosts","genericNames","length","realNames","botBios","realBios","postCount","i","dayOffset","likes","comments","shares","push","id","content","generatePostContent","timestamp","botContent","platforms","fetchWithRealism","Error","socialMediaAPI"],"sources":["/Users/chrism2homefolder/Desktop/ClippIntelProject/src/assets/utils/socialMediaApi.ts"],"sourcesContent":["import { SocialAccount, SocialMediaProfile, Platform } from '../types';\n\n// Mock data generator for realistic social media profiles\nexport class SocialMediaMockAPI {\n  \n  private generateRealisticMetrics(platform: Platform, isBot: boolean = false) {\n    const baseMetrics = {\n      instagram: { minFollowers: 100, maxFollowers: 50000, engagementRate: 3.5 },\n      tiktok: { minFollowers: 50, maxFollowers: 100000, engagementRate: 8.2 },\n      youtube: { minFollowers: 500, maxFollowers: 25000, engagementRate: 2.1 },\n      twitter: { minFollowers: 200, maxFollowers: 75000, engagementRate: 1.8 }\n    };\n\n    const base = baseMetrics[platform];\n    \n    if (isBot) {\n      // Bot accounts typically have suspicious patterns\n      return {\n        followers: Math.floor(Math.random() * (base.maxFollowers - base.minFollowers)) + base.minFollowers,\n        following: Math.floor(Math.random() * 5000) + 2000, // Bots often follow many accounts\n        engagementRate: Math.random() * 0.5 + 0.1, // Very low engagement\n        postsPerDay: Math.random() * 20 + 10, // Posting too frequently\n        accountAge: Math.floor(Math.random() * 90) + 1, // Recent accounts\n        profileCompleteness: Math.random() * 40 + 20 // Incomplete profiles\n      };\n    } else {\n      // Legitimate accounts have more organic patterns\n      return {\n        followers: Math.floor(Math.random() * (base.maxFollowers - base.minFollowers)) + base.minFollowers,\n        following: Math.floor(Math.random() * 1000) + 100,\n        engagementRate: base.engagementRate + (Math.random() * 2 - 1),\n        postsPerDay: Math.random() * 3 + 0.5,\n        accountAge: Math.floor(Math.random() * 1800) + 180, // Older accounts\n        profileCompleteness: Math.random() * 30 + 70 // More complete profiles\n      };\n    }\n  }\n\n  private generateBotPatterns(handle: string): boolean {\n    // Simulate bot detection based on handle patterns\n    const botIndicators = [\n      /\\d{4,}$/, // Ends with 4+ numbers\n      /^[a-z]+\\d+[a-z]+\\d+/, // Mixed letters and numbers\n      /[a-z]{2,3}\\d{2,3}[a-z]{2,3}/, // Pattern like \"ab12cd\"\n      /_\\d+_/, // Underscores with numbers\n      /^(user|account|profile)\\d+/i, // Generic names with numbers\n    ];\n\n    return botIndicators.some(pattern => pattern.test(handle));\n  }\n\n  async fetchProfile(account: SocialAccount): Promise<SocialMediaProfile> {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, Math.random() * 2000 + 500));\n\n    const isLikelyBot = this.generateBotPatterns(account.handle);\n    const metrics = this.generateRealisticMetrics(account.platform, isLikelyBot);\n\n    // Generate realistic profile data\n    const profile: SocialMediaProfile = {\n      handle: account.handle,\n      displayName: this.generateDisplayName(account.handle, isLikelyBot),\n      bio: this.generateBio(isLikelyBot),\n      profileImageUrl: `https://api.dicebear.com/7.x/avataaars/svg?seed=${account.handle}`,\n      isVerified: !isLikelyBot && Math.random() > 0.95, // Only 5% of legitimate accounts are verified\n      followers: Math.floor(metrics.followers),\n      following: Math.floor(metrics.following),\n      posts: Math.floor(metrics.postsPerDay * metrics.accountAge),\n      accountCreated: new Date(Date.now() - metrics.accountAge * 24 * 60 * 60 * 1000),\n      lastPost: new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000),\n      recentPosts: this.generateRecentPosts(account.platform, isLikelyBot, Math.floor(metrics.followers), metrics.engagementRate)\n    };\n\n    return profile;\n  }\n\n  private generateDisplayName(handle: string, isBot: boolean): string {\n    if (isBot) {\n      // Bots often have generic or copy-paste names\n      const genericNames = [\n        'Social User', 'Content Creator', 'Digital Marketer', 'Lifestyle Blogger',\n        'Tech Enthusiast', 'Fashion Lover', 'Travel Addict', 'Fitness Guru'\n      ];\n      return Math.random() > 0.3 ? genericNames[Math.floor(Math.random() * genericNames.length)] : handle;\n    } else {\n      // Legitimate accounts have more personalized names\n      const realNames = [\n        'Sarah Johnson', 'Mike Chen', 'Emma Rodriguez', 'Alex Thompson',\n        'Jordan Williams', 'Casey Miller', 'Taylor Davis', 'Morgan Lee'\n      ];\n      return Math.random() > 0.6 ? realNames[Math.floor(Math.random() * realNames.length)] : handle;\n    }\n  }\n\n  private generateBio(isBot: boolean): string {\n    if (isBot) {\n      const botBios = [\n        '🌟 Follow for daily motivation! Link in bio 👇',\n        '💯 Entrepreneur | DM for collaboration',\n        'Lifestyle content creator ✨ Check my latest post!',\n        '🔥 Follow back guaranteed! Link below 👇',\n        ''\n      ];\n      return botBios[Math.floor(Math.random() * botBios.length)];\n    } else {\n      const realBios = [\n        'Coffee enthusiast ☕ | Dog mom 🐕 | Weekend hiker',\n        'Software developer by day, photographer by weekend 📸',\n        'Plant parent 🌱 | Bookworm 📚 | NYC',\n        'Travel memories & food adventures 🌍✈️',\n        'Yoga teacher | Mindfulness coach | Spreading good vibes ✨'\n      ];\n      return realBios[Math.floor(Math.random() * realBios.length)];\n    }\n  }\n\n  private generateRecentPosts(platform: Platform, isBot: boolean, followers: number, engagementRate: number) {\n    const postCount = Math.floor(Math.random() * 10) + 5;\n    const posts = [];\n\n    for (let i = 0; i < postCount; i++) {\n      const dayOffset = i * Math.random() * 3;\n      const likes = Math.floor(followers * (engagementRate / 100) * (Math.random() * 0.5 + 0.75));\n      const comments = Math.floor(likes * 0.1 * Math.random());\n      const shares = Math.floor(likes * 0.05 * Math.random());\n\n      posts.push({\n        id: `post_${Date.now()}_${i}`,\n        content: this.generatePostContent(platform, isBot),\n        likes: isBot ? Math.floor(likes * 0.1) : likes, // Bots get much less engagement\n        comments: isBot ? Math.floor(comments * 0.1) : comments,\n        shares: isBot ? Math.floor(shares * 0.1) : shares,\n        timestamp: new Date(Date.now() - dayOffset * 24 * 60 * 60 * 1000)\n      });\n    }\n\n    return posts;\n  }\n\n  private generatePostContent(platform: Platform, isBot: boolean): string {\n    if (isBot) {\n      const botContent = [\n        'Amazing opportunity! Check link in bio! 💰🔥',\n        'Follow for more content like this! ⭐',\n        'DM me for collaboration! 📩💯',\n        'Link in bio for exclusive content! 👆✨',\n        'Don\\'t miss out! Follow now! 🚀'\n      ];\n      return botContent[Math.floor(Math.random() * botContent.length)];\n    } else {\n      const platforms = {\n        instagram: [\n          'Perfect Sunday morning vibes ☕️ #weekend',\n          'Trying out this new recipe today! Wish me luck 👩‍🍳',\n          'Beautiful sunset from my evening walk 🌅',\n          'Coffee shop discoveries never get old ☕️📚'\n        ],\n        tiktok: [\n          'When you finally nail that dance trend 💃',\n          'POV: You\\'re trying to be productive but...',\n          'This life hack actually works! 🤯',\n          'Rating viral food trends so you don\\'t have to'\n        ],\n        youtube: [\n          'New video is live! Thanks for all the support ❤️',\n          'Behind the scenes of yesterday\\'s shoot 🎬',\n          'Q&A video coming next week! Drop your questions below',\n          'Celebrating 10K subscribers! Thank you all! 🎉'\n        ],\n        twitter: [\n          'Hot take: pineapple on pizza is actually good 🍍🍕',\n          'Just finished an amazing book recommendation thread 📚',\n          'Monday motivation: small progress is still progress',\n          'Unpopular opinion but I actually love rainy days ☔'\n        ]\n      };\n      \n      const content = platforms[platform] || platforms.instagram;\n      return content[Math.floor(Math.random() * content.length)];\n    }\n  }\n\n  // Simulate rate limiting and errors\n  async fetchWithRealism(account: SocialAccount): Promise<SocialMediaProfile> {\n    // Simulate occasional API errors\n    if (Math.random() < 0.05) { // 5% error rate\n      throw new Error(`${account.platform} API rate limit exceeded`);\n    }\n\n    if (Math.random() < 0.02) { // 2% account not found\n      throw new Error(`Account ${account.handle} not found on ${account.platform}`);\n    }\n\n    return this.fetchProfile(account);\n  }\n}\n\nexport const socialMediaAPI = new SocialMediaMockAPI();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}