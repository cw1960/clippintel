{"ast":null,"code":"const SUPABASE_URL = 'https://joxzubnkgelzxoyzotbt.supabase.co';\nconst SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpveHp1Ym5rZ2VsenhveXpvdGJ0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTE4Mzg1ODQsImV4cCI6MjA2NzQxNDU4NH0.3oTCzc1g_G7-QCrEkYDgj2US4z2olyd6A7X-jlpcUoI';\nclass SocialMediaApiService {\n  async analyzeYouTubeAccount(channelId, apiKey) {\n    try {\n      const response = await fetch(`${SUPABASE_URL}/functions/v1/youtube-bot-detection`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${SUPABASE_ANON_KEY}`\n        },\n        body: JSON.stringify({\n          channelId,\n          apiKey\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`YouTube API error: ${response.status}`);\n      }\n      const result = await response.json();\n      return {\n        ...result,\n        platform: 'youtube',\n        analysisDate: new Date().toISOString()\n      };\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      throw new Error(`Failed to analyze YouTube account: ${errorMessage}`);\n    }\n  }\n  async analyzeInstagramAccount(username, accessToken) {\n    throw new Error('Instagram API integration pending approval');\n  }\n  async analyzeTikTokAccount(accessToken) {\n    throw new Error('TikTok API integration pending approval');\n  }\n  async analyzeTwitterAccount(username) {\n    throw new Error('Twitter API integration not yet implemented');\n  }\n}\nexport const socialMediaApi = new SocialMediaApiService();","map":{"version":3,"names":["SUPABASE_URL","SUPABASE_ANON_KEY","SocialMediaApiService","analyzeYouTubeAccount","channelId","apiKey","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","result","json","platform","analysisDate","Date","toISOString","error","errorMessage","message","analyzeInstagramAccount","username","accessToken","analyzeTikTokAccount","analyzeTwitterAccount","socialMediaApi"],"sources":["/Users/chrism2homefolder/Desktop/ClippIntelProject/src/utils/socialMediaApi.ts"],"sourcesContent":["export interface BotDetectionResult {\n  username: string;\n  platform: string;\n  botProbability: number;\n  riskLevel: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';\n  flags: string[];\n  analysis: {\n    profileAnalysis: { score: number };\n    engagementAnalysis: { score: number };\n    contentAnalysis: { score: number };\n    networkAnalysis: { score: number };\n  };\n  recommendation: string;\n  analysisDate: string;\n}\n\nconst SUPABASE_URL = 'https://joxzubnkgelzxoyzotbt.supabase.co';\nconst SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpveHp1Ym5rZ2VsenhveXpvdGJ0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTE4Mzg1ODQsImV4cCI6MjA2NzQxNDU4NH0.3oTCzc1g_G7-QCrEkYDgj2US4z2olyd6A7X-jlpcUoI';\n\nclass SocialMediaApiService {\n  async analyzeYouTubeAccount(channelId: string, apiKey: string): Promise<BotDetectionResult> {\n    try {\n      const response = await fetch(`${SUPABASE_URL}/functions/v1/youtube-bot-detection`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,\n        },\n        body: JSON.stringify({ channelId, apiKey })\n      });\n\n      if (!response.ok) {\n        throw new Error(`YouTube API error: ${response.status}`);\n      }\n\n      const result = await response.json();\n      return {\n        ...result,\n        platform: 'youtube',\n        analysisDate: new Date().toISOString()\n      };\n    } catch (error: unknown) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      throw new Error(`Failed to analyze YouTube account: ${errorMessage}`);\n    }\n  }\n\n  async analyzeInstagramAccount(username: string, accessToken: string): Promise<BotDetectionResult> {\n    throw new Error('Instagram API integration pending approval');\n  }\n\n  async analyzeTikTokAccount(accessToken: string): Promise<BotDetectionResult> {\n    throw new Error('TikTok API integration pending approval');\n  }\n\n  async analyzeTwitterAccount(username: string): Promise<BotDetectionResult> {\n    throw new Error('Twitter API integration not yet implemented');\n  }\n}\n\nexport const socialMediaApi = new SocialMediaApiService();\n"],"mappings":"AAgBA,MAAMA,YAAY,GAAG,0CAA0C;AAC/D,MAAMC,iBAAiB,GAAG,kNAAkN;AAE5O,MAAMC,qBAAqB,CAAC;EAC1B,MAAMC,qBAAqBA,CAACC,SAAiB,EAAEC,MAAc,EAA+B;IAC1F,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,YAAY,qCAAqC,EAAE;QACjFQ,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,eAAe,EAAE,UAAUR,iBAAiB;QAC9C,CAAC;QACDS,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAER,SAAS;UAAEC;QAAO,CAAC;MAC5C,CAAC,CAAC;MAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,sBAAsBR,QAAQ,CAACS,MAAM,EAAE,CAAC;MAC1D;MAEA,MAAMC,MAAM,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;MACpC,OAAO;QACL,GAAGD,MAAM;QACTE,QAAQ,EAAE,SAAS;QACnBC,YAAY,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACvC,CAAC;IACH,CAAC,CAAC,OAAOC,KAAc,EAAE;MACvB,MAAMC,YAAY,GAAGD,KAAK,YAAYR,KAAK,GAAGQ,KAAK,CAACE,OAAO,GAAG,eAAe;MAC7E,MAAM,IAAIV,KAAK,CAAC,sCAAsCS,YAAY,EAAE,CAAC;IACvE;EACF;EAEA,MAAME,uBAAuBA,CAACC,QAAgB,EAAEC,WAAmB,EAA+B;IAChG,MAAM,IAAIb,KAAK,CAAC,4CAA4C,CAAC;EAC/D;EAEA,MAAMc,oBAAoBA,CAACD,WAAmB,EAA+B;IAC3E,MAAM,IAAIb,KAAK,CAAC,yCAAyC,CAAC;EAC5D;EAEA,MAAMe,qBAAqBA,CAACH,QAAgB,EAA+B;IACzE,MAAM,IAAIZ,KAAK,CAAC,6CAA6C,CAAC;EAChE;AACF;AAEA,OAAO,MAAMgB,cAAc,GAAG,IAAI5B,qBAAqB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}