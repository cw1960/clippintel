{"ast":null,"code":"// socialMediaApi.ts - Fixed Supabase Integration\n// This will properly call your deployed Edge Functions\n\nimport { createClient } from '@supabase/supabase-js';\n\n// Direct supabase initialization using your env vars\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL;\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY;\nconst supabase = createClient(supabaseUrl, supabaseAnonKey);\n\n// Types\n\n// YouTube Analysis - LIVE EDGE FUNCTION\nexport async function analyzeYouTubeChannel(channelInput) {\n  try {\n    console.log('🎥 Calling YouTube Edge Function for:', channelInput);\n    const {\n      data,\n      error\n    } = await supabase.functions.invoke('youtube-bot-detection', {\n      body: {\n        channelId: channelInput\n      }\n    });\n    if (error) {\n      console.error('❌ YouTube Edge Function error:', error);\n      throw error;\n    }\n    console.log('✅ YouTube Edge Function SUCCESS - Live data:', data);\n    return data;\n  } catch (error) {\n    console.error('🚫 YouTube Edge Function FAILED, using demo data:', error);\n\n    // Demo fallback\n    return {\n      platform: 'youtube',\n      username: channelInput,\n      channelId: channelInput,\n      channelName: `Demo: ${channelInput}`,\n      analysis: {\n        botProbability: 15,\n        riskLevel: 'Low',\n        flags: ['DEMO DATA - Edge Function failed'],\n        recommendation: 'This is demo data due to API error.',\n        metrics: {\n          subscribers: 1000000,\n          videos: 100,\n          views: 50000000,\n          channelAge: 365,\n          uploadsLast30Days: 4,\n          avgViewsPerVideo: 500000,\n          subscriberGrowthRate: 5.2\n        }\n      }\n    };\n  }\n}\n\n// Twitter Analysis - LIVE EDGE FUNCTION\nexport async function analyzeTwitterAccount(username) {\n  try {\n    const cleanUsername = username.replace('@', '');\n    console.log('🐦 Calling Twitter Edge Function for:', cleanUsername);\n    const {\n      data,\n      error\n    } = await supabase.functions.invoke('twitter-bot-detection', {\n      body: {\n        username: cleanUsername\n      }\n    });\n    if (error) {\n      console.error('❌ Twitter Edge Function error:', error);\n      throw error;\n    }\n    console.log('✅ Twitter Edge Function SUCCESS - Live data:', data);\n    return data;\n  } catch (error) {\n    console.error('🚫 Twitter Edge Function FAILED, using demo data:', error);\n    const cleanUsername = username.replace('@', '');\n    return {\n      platform: 'twitter',\n      username: cleanUsername,\n      displayName: cleanUsername,\n      analysis: {\n        botProbability: 12,\n        riskLevel: 'Low',\n        flags: ['DEMO DATA - Edge Function failed'],\n        recommendation: 'This is demo data due to API error.',\n        metrics: {\n          followers: 50000,\n          following: 1000,\n          tweets: 5000,\n          accountAge: 1000,\n          followerRatio: 50,\n          tweetsPerDay: 5,\n          verificationStatus: false\n        }\n      }\n    };\n  }\n}\n\n// Instagram Analysis - LIVE EDGE FUNCTION\nexport async function analyzeInstagramAccount(username) {\n  try {\n    const cleanUsername = username.replace('@', '');\n    console.log('📸 Calling Instagram Edge Function for:', cleanUsername);\n    const {\n      data,\n      error\n    } = await supabase.functions.invoke('instagram-bot-detection', {\n      body: {\n        username: cleanUsername\n      }\n    });\n    if (error) {\n      console.error('❌ Instagram Edge Function error:', error);\n      throw error;\n    }\n    console.log('✅ Instagram Edge Function SUCCESS - Live data:', data);\n    return data;\n  } catch (error) {\n    console.error('🚫 Instagram Edge Function FAILED, using demo data:', error);\n\n    // Demo fallback with known accounts\n    const cleanUsername = username.replace('@', '');\n    const demoAccounts = {\n      'cristiano': {\n        platform: 'instagram',\n        username: 'cristiano',\n        accountType: 'CREATOR',\n        analysis: {\n          botProbability: 5,\n          riskLevel: 'Very Low',\n          flags: ['DEMO DATA - Edge Function failed'],\n          recommendation: 'Demo: Account appears authentic.',\n          metrics: {\n            followers: 635000000,\n            following: 540,\n            posts: 3489,\n            accountType: 'CREATOR',\n            followerRatio: 1175925.93\n          }\n        }\n      },\n      'fake_account_123': {\n        platform: 'instagram',\n        username: 'fake_account_123',\n        accountType: 'PERSONAL',\n        analysis: {\n          botProbability: 85,\n          riskLevel: 'High',\n          flags: ['DEMO DATA - Edge Function failed', 'Username ends with many numbers', 'Low engagement rate'],\n          recommendation: 'Demo: Strong evidence of bot activity.',\n          metrics: {\n            followers: 1200,\n            following: 5600,\n            posts: 3,\n            accountType: 'PERSONAL',\n            followerRatio: 0.21\n          }\n        }\n      }\n    };\n    return demoAccounts[cleanUsername.toLowerCase()] || {\n      platform: 'instagram',\n      username: cleanUsername,\n      accountType: 'UNKNOWN',\n      analysis: {\n        botProbability: 45,\n        riskLevel: 'Medium',\n        flags: ['DEMO DATA - Edge Function failed'],\n        recommendation: 'Demo: Requires manual review.',\n        metrics: {\n          followers: 0,\n          following: 0,\n          posts: 0,\n          accountType: 'UNKNOWN',\n          followerRatio: 0\n        }\n      }\n    };\n  }\n}\n\n// TikTok Analysis - LIVE EDGE FUNCTION\nexport async function analyzeTikTokAccount(username) {\n  try {\n    const cleanUsername = username.replace('@', '');\n    console.log('🎵 Calling TikTok Edge Function for:', cleanUsername);\n    const {\n      data,\n      error\n    } = await supabase.functions.invoke('tiktok-bot-detection', {\n      body: {\n        username: cleanUsername\n      }\n    });\n    if (error) {\n      console.error('❌ TikTok Edge Function error:', error);\n      throw error;\n    }\n    console.log('✅ TikTok Edge Function SUCCESS - Live data:', data);\n    return data;\n  } catch (error) {\n    console.error('🚫 TikTok Edge Function FAILED, using demo data:', error);\n    const cleanUsername = username.replace('@', '');\n    const demoAccounts = {\n      'charlidamelio': {\n        platform: 'tiktok',\n        username: 'charlidamelio',\n        displayName: 'Charli D\\'Amelio',\n        analysis: {\n          botProbability: 3,\n          riskLevel: 'Very Low',\n          flags: ['DEMO DATA - Edge Function failed'],\n          recommendation: 'Demo: Verified creator with excellent engagement.',\n          metrics: {\n            followers: 151000000,\n            following: 1542,\n            videos: 2341,\n            likes: 11200000000,\n            followerRatio: 97923.45,\n            engagementRate: 8.5\n          }\n        }\n      }\n    };\n    return demoAccounts[cleanUsername.toLowerCase()] || {\n      platform: 'tiktok',\n      username: cleanUsername,\n      displayName: cleanUsername,\n      analysis: {\n        botProbability: 50,\n        riskLevel: 'Medium',\n        flags: ['DEMO DATA - Edge Function failed'],\n        recommendation: 'Demo: Manual review required.',\n        metrics: {\n          followers: 0,\n          following: 0,\n          videos: 0,\n          likes: 0,\n          followerRatio: 0,\n          engagementRate: 0\n        }\n      }\n    };\n  }\n}\n\n// Utility Functions\nexport function validatePlatformInput(platform, input) {\n  if (!input.trim()) {\n    return {\n      isValid: false,\n      error: 'Account input is required'\n    };\n  }\n  return {\n    isValid: true\n  };\n}\nexport function getRiskColor(riskLevel) {\n  switch (riskLevel === null || riskLevel === void 0 ? void 0 : riskLevel.toLowerCase()) {\n    case 'very low':\n      return 'text-green-600 bg-green-50';\n    case 'low':\n      return 'text-green-600 bg-green-50';\n    case 'medium':\n      return 'text-yellow-600 bg-yellow-50';\n    case 'high':\n      return 'text-red-600 bg-red-50';\n    default:\n      return 'text-gray-600 bg-gray-50';\n  }\n}\nexport function formatNumber(num) {\n  if (num >= 1000000000) {\n    return (num / 1000000000).toFixed(1) + 'B';\n  }\n  if (num >= 1000000) {\n    return (num / 1000000).toFixed(1) + 'M';\n  }\n  if (num >= 1000) {\n    return (num / 1000).toFixed(1) + 'K';\n  }\n  return num.toString();\n}","map":{"version":3,"names":["createClient","supabaseUrl","process","env","REACT_APP_SUPABASE_URL","supabaseAnonKey","REACT_APP_SUPABASE_ANON_KEY","supabase","analyzeYouTubeChannel","channelInput","console","log","data","error","functions","invoke","body","channelId","platform","username","channelName","analysis","botProbability","riskLevel","flags","recommendation","metrics","subscribers","videos","views","channelAge","uploadsLast30Days","avgViewsPerVideo","subscriberGrowthRate","analyzeTwitterAccount","cleanUsername","replace","displayName","followers","following","tweets","accountAge","followerRatio","tweetsPerDay","verificationStatus","analyzeInstagramAccount","demoAccounts","accountType","posts","toLowerCase","analyzeTikTokAccount","likes","engagementRate","validatePlatformInput","input","trim","isValid","getRiskColor","formatNumber","num","toFixed","toString"],"sources":["/Users/chrism2homefolder/Desktop/ClippIntelProject/src/assets/utils/socialMediaApi.ts"],"sourcesContent":["// socialMediaApi.ts - Fixed Supabase Integration\n// This will properly call your deployed Edge Functions\n\nimport { createClient } from '@supabase/supabase-js';\n\n// Direct supabase initialization using your env vars\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL!;\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY!;\n\nconst supabase = createClient(supabaseUrl, supabaseAnonKey);\n\n// Types\nexport interface BotDetectionResult {\n  platform: string;\n  username: string;\n  accountType?: string;\n  channelId?: string;\n  channelName?: string;\n  displayName?: string;\n  analysis: {\n    botProbability: number;\n    riskLevel: string;\n    flags: string[];\n    recommendation: string;\n    metrics: any;\n  };\n}\n\n// YouTube Analysis - LIVE EDGE FUNCTION\nexport async function analyzeYouTubeChannel(channelInput: string): Promise<BotDetectionResult> {\n  try {\n    console.log('🎥 Calling YouTube Edge Function for:', channelInput);\n    \n    const { data, error } = await supabase.functions.invoke('youtube-bot-detection', {\n      body: { channelId: channelInput }\n    });\n\n    if (error) {\n      console.error('❌ YouTube Edge Function error:', error);\n      throw error;\n    }\n\n    console.log('✅ YouTube Edge Function SUCCESS - Live data:', data);\n    return data;\n\n  } catch (error) {\n    console.error('🚫 YouTube Edge Function FAILED, using demo data:', error);\n    \n    // Demo fallback\n    return {\n      platform: 'youtube',\n      username: channelInput,\n      channelId: channelInput,\n      channelName: `Demo: ${channelInput}`,\n      analysis: {\n        botProbability: 15,\n        riskLevel: 'Low',\n        flags: ['DEMO DATA - Edge Function failed'],\n        recommendation: 'This is demo data due to API error.',\n        metrics: {\n          subscribers: 1000000,\n          videos: 100,\n          views: 50000000,\n          channelAge: 365,\n          uploadsLast30Days: 4,\n          avgViewsPerVideo: 500000,\n          subscriberGrowthRate: 5.2\n        }\n      }\n    };\n  }\n}\n\n// Twitter Analysis - LIVE EDGE FUNCTION\nexport async function analyzeTwitterAccount(username: string): Promise<BotDetectionResult> {\n  try {\n    const cleanUsername = username.replace('@', '');\n    console.log('🐦 Calling Twitter Edge Function for:', cleanUsername);\n    \n    const { data, error } = await supabase.functions.invoke('twitter-bot-detection', {\n      body: { username: cleanUsername }\n    });\n\n    if (error) {\n      console.error('❌ Twitter Edge Function error:', error);\n      throw error;\n    }\n\n    console.log('✅ Twitter Edge Function SUCCESS - Live data:', data);\n    return data;\n\n  } catch (error) {\n    console.error('🚫 Twitter Edge Function FAILED, using demo data:', error);\n    \n    const cleanUsername = username.replace('@', '');\n    return {\n      platform: 'twitter',\n      username: cleanUsername,\n      displayName: cleanUsername,\n      analysis: {\n        botProbability: 12,\n        riskLevel: 'Low',\n        flags: ['DEMO DATA - Edge Function failed'],\n        recommendation: 'This is demo data due to API error.',\n        metrics: {\n          followers: 50000,\n          following: 1000,\n          tweets: 5000,\n          accountAge: 1000,\n          followerRatio: 50,\n          tweetsPerDay: 5,\n          verificationStatus: false\n        }\n      }\n    };\n  }\n}\n\n// Instagram Analysis - LIVE EDGE FUNCTION\nexport async function analyzeInstagramAccount(username: string): Promise<BotDetectionResult> {\n  try {\n    const cleanUsername = username.replace('@', '');\n    console.log('📸 Calling Instagram Edge Function for:', cleanUsername);\n    \n    const { data, error } = await supabase.functions.invoke('instagram-bot-detection', {\n      body: { username: cleanUsername }\n    });\n\n    if (error) {\n      console.error('❌ Instagram Edge Function error:', error);\n      throw error;\n    }\n\n    console.log('✅ Instagram Edge Function SUCCESS - Live data:', data);\n    return data;\n\n  } catch (error) {\n    console.error('🚫 Instagram Edge Function FAILED, using demo data:', error);\n    \n    // Demo fallback with known accounts\n    const cleanUsername = username.replace('@', '');\n    const demoAccounts: Record<string, any> = {\n      'cristiano': {\n        platform: 'instagram',\n        username: 'cristiano',\n        accountType: 'CREATOR',\n        analysis: {\n          botProbability: 5,\n          riskLevel: 'Very Low',\n          flags: ['DEMO DATA - Edge Function failed'],\n          recommendation: 'Demo: Account appears authentic.',\n          metrics: {\n            followers: 635000000,\n            following: 540,\n            posts: 3489,\n            accountType: 'CREATOR',\n            followerRatio: 1175925.93\n          }\n        }\n      },\n      'fake_account_123': {\n        platform: 'instagram',\n        username: 'fake_account_123',\n        accountType: 'PERSONAL',\n        analysis: {\n          botProbability: 85,\n          riskLevel: 'High',\n          flags: [\n            'DEMO DATA - Edge Function failed',\n            'Username ends with many numbers',\n            'Low engagement rate'\n          ],\n          recommendation: 'Demo: Strong evidence of bot activity.',\n          metrics: {\n            followers: 1200,\n            following: 5600,\n            posts: 3,\n            accountType: 'PERSONAL',\n            followerRatio: 0.21\n          }\n        }\n      }\n    };\n\n    return demoAccounts[cleanUsername.toLowerCase()] || {\n      platform: 'instagram',\n      username: cleanUsername,\n      accountType: 'UNKNOWN',\n      analysis: {\n        botProbability: 45,\n        riskLevel: 'Medium',\n        flags: ['DEMO DATA - Edge Function failed'],\n        recommendation: 'Demo: Requires manual review.',\n        metrics: {\n          followers: 0,\n          following: 0,\n          posts: 0,\n          accountType: 'UNKNOWN',\n          followerRatio: 0\n        }\n      }\n    };\n  }\n}\n\n// TikTok Analysis - LIVE EDGE FUNCTION\nexport async function analyzeTikTokAccount(username: string): Promise<BotDetectionResult> {\n  try {\n    const cleanUsername = username.replace('@', '');\n    console.log('🎵 Calling TikTok Edge Function for:', cleanUsername);\n    \n    const { data, error } = await supabase.functions.invoke('tiktok-bot-detection', {\n      body: { username: cleanUsername }\n    });\n\n    if (error) {\n      console.error('❌ TikTok Edge Function error:', error);\n      throw error;\n    }\n\n    console.log('✅ TikTok Edge Function SUCCESS - Live data:', data);\n    return data;\n\n  } catch (error) {\n    console.error('🚫 TikTok Edge Function FAILED, using demo data:', error);\n    \n    const cleanUsername = username.replace('@', '');\n    const demoAccounts: Record<string, any> = {\n      'charlidamelio': {\n        platform: 'tiktok',\n        username: 'charlidamelio',\n        displayName: 'Charli D\\'Amelio',\n        analysis: {\n          botProbability: 3,\n          riskLevel: 'Very Low',\n          flags: ['DEMO DATA - Edge Function failed'],\n          recommendation: 'Demo: Verified creator with excellent engagement.',\n          metrics: {\n            followers: 151000000,\n            following: 1542,\n            videos: 2341,\n            likes: 11200000000,\n            followerRatio: 97923.45,\n            engagementRate: 8.5\n          }\n        }\n      }\n    };\n\n    return demoAccounts[cleanUsername.toLowerCase()] || {\n      platform: 'tiktok',\n      username: cleanUsername,\n      displayName: cleanUsername,\n      analysis: {\n        botProbability: 50,\n        riskLevel: 'Medium',\n        flags: ['DEMO DATA - Edge Function failed'],\n        recommendation: 'Demo: Manual review required.',\n        metrics: {\n          followers: 0,\n          following: 0,\n          videos: 0,\n          likes: 0,\n          followerRatio: 0,\n          engagementRate: 0\n        }\n      }\n    };\n  }\n}\n\n// Utility Functions\nexport function validatePlatformInput(platform: string, input: string): { isValid: boolean; error?: string } {\n  if (!input.trim()) {\n    return { isValid: false, error: 'Account input is required' };\n  }\n  return { isValid: true };\n}\n\nexport function getRiskColor(riskLevel: string): string {\n  switch (riskLevel?.toLowerCase()) {\n    case 'very low':\n      return 'text-green-600 bg-green-50';\n    case 'low':\n      return 'text-green-600 bg-green-50';\n    case 'medium':\n      return 'text-yellow-600 bg-yellow-50';\n    case 'high':\n      return 'text-red-600 bg-red-50';\n    default:\n      return 'text-gray-600 bg-gray-50';\n  }\n}\n\nexport function formatNumber(num: number): string {\n  if (num >= 1000000000) {\n    return (num / 1000000000).toFixed(1) + 'B';\n  }\n  if (num >= 1000000) {\n    return (num / 1000000).toFixed(1) + 'M';\n  }\n  if (num >= 1000) {\n    return (num / 1000).toFixed(1) + 'K';\n  }\n  return num.toString();\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}