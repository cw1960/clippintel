{"ast":null,"code":"import { createClient } from '@supabase/supabase-js';\nconst supabaseUrl = 'https://joxzubnkgelzxoyzotbt.supabase.co';\nconst supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpveHp1Ym5rZ2VsenhveXpvdGJ0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MjA3NjcyNzgsImV4cCI6MjAzNjM0MzI3OH0.4aBJwQs4FqJqHlQ3Z_Ku-VGjxlnXgNs91mE7zORqY_Q';\nconst supabase = createClient(supabaseUrl, supabaseKey);\nexport function validatePlatformInput(platform, input) {\n  return {\n    isValid: !!input.trim()\n  };\n}\nexport function formatNumber(num) {\n  if (num >= 1000000000) return (num / 1000000000).toFixed(1) + 'B';\n  if (num >= 1000000) return (num / 1000000).toFixed(1) + 'M';\n  if (num >= 1000) return (num / 1000).toFixed(1) + 'K';\n  return num.toString();\n}\nexport function getRiskColor(riskLevel) {\n  switch (riskLevel.toLowerCase()) {\n    case 'low':\n      return 'bg-green-100 text-green-800';\n    case 'medium':\n      return 'bg-yellow-100 text-yellow-800';\n    case 'high':\n      return 'bg-red-100 text-red-800';\n    default:\n      return 'bg-gray-100 text-gray-800';\n  }\n}\nexport async function analyzeYouTubeChannel(channelInput) {\n  const {\n    data,\n    error\n  } = await supabase.functions.invoke('youtube-bot-detection', {\n    body: {\n      channelInput\n    }\n  });\n  if (error) throw new Error('YouTube analysis failed');\n  return data;\n}\nexport async function analyzeTikTokAccount(username) {\n  const {\n    data,\n    error\n  } = await supabase.functions.invoke('tiktok-bot-detection', {\n    body: {\n      username\n    }\n  });\n  if (error) throw new Error('TikTok analysis failed');\n  return data;\n}\nexport async function analyzeTwitterAccount(username) {\n  throw new Error('Twitter integration not yet implemented');\n}\nexport async function analyzeInstagramAccount(username) {\n  throw new Error('Instagram integration not yet implemented');\n}","map":{"version":3,"names":["createClient","supabaseUrl","supabaseKey","supabase","validatePlatformInput","platform","input","isValid","trim","formatNumber","num","toFixed","toString","getRiskColor","riskLevel","toLowerCase","analyzeYouTubeChannel","channelInput","data","error","functions","invoke","body","Error","analyzeTikTokAccount","username","analyzeTwitterAccount","analyzeInstagramAccount"],"sources":["/Users/chrism2homefolder/Desktop/ClippIntelProject/src/assets/utils/socialMediaApi.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = 'https://joxzubnkgelzxoyzotbt.supabase.co';\nconst supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpveHp1Ym5rZ2VsenhveXpvdGJ0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MjA3NjcyNzgsImV4cCI6MjAzNjM0MzI3OH0.4aBJwQs4FqJqHlQ3Z_Ku-VGjxlnXgNs91mE7zORqY_Q';\nconst supabase = createClient(supabaseUrl, supabaseKey);\n\nexport interface BotDetectionResult {\n  platform: string;\n  username?: string;\n  channelId?: string;\n  channelName?: string;\n  displayName?: string;\n  analysis: {\n    botProbability: number;\n    riskLevel: string;\n    flags: string[];\n    recommendation: string;\n    metrics: Record<string, any>;\n  };\n}\n\nexport function validatePlatformInput(platform: string, input: string) {\n  return { isValid: !!input.trim() };\n}\n\nexport function formatNumber(num: number): string {\n  if (num >= 1000000000) return (num / 1000000000).toFixed(1) + 'B';\n  if (num >= 1000000) return (num / 1000000).toFixed(1) + 'M';\n  if (num >= 1000) return (num / 1000).toFixed(1) + 'K';\n  return num.toString();\n}\n\nexport function getRiskColor(riskLevel: string): string {\n  switch (riskLevel.toLowerCase()) {\n    case 'low': return 'bg-green-100 text-green-800';\n    case 'medium': return 'bg-yellow-100 text-yellow-800';\n    case 'high': return 'bg-red-100 text-red-800';\n    default: return 'bg-gray-100 text-gray-800';\n  }\n}\n\nexport async function analyzeYouTubeChannel(channelInput: string): Promise<BotDetectionResult> {\n  const { data, error } = await supabase.functions.invoke('youtube-bot-detection', {\n    body: { channelInput }\n  });\n  if (error) throw new Error('YouTube analysis failed');\n  return data;\n}\n\nexport async function analyzeTikTokAccount(username: string): Promise<BotDetectionResult> {\n  const { data, error } = await supabase.functions.invoke('tiktok-bot-detection', {\n    body: { username }\n  });\n  if (error) throw new Error('TikTok analysis failed');\n  return data;\n}\n\nexport async function analyzeTwitterAccount(username: string): Promise<BotDetectionResult> {\n  throw new Error('Twitter integration not yet implemented');\n}\n\nexport async function analyzeInstagramAccount(username: string): Promise<BotDetectionResult> {\n  throw new Error('Instagram integration not yet implemented');\n}\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,uBAAuB;AAEpD,MAAMC,WAAW,GAAG,0CAA0C;AAC9D,MAAMC,WAAW,GAAG,kNAAkN;AACtO,MAAMC,QAAQ,GAAGH,YAAY,CAACC,WAAW,EAAEC,WAAW,CAAC;AAiBvD,OAAO,SAASE,qBAAqBA,CAACC,QAAgB,EAAEC,KAAa,EAAE;EACrE,OAAO;IAAEC,OAAO,EAAE,CAAC,CAACD,KAAK,CAACE,IAAI,CAAC;EAAE,CAAC;AACpC;AAEA,OAAO,SAASC,YAAYA,CAACC,GAAW,EAAU;EAChD,IAAIA,GAAG,IAAI,UAAU,EAAE,OAAO,CAACA,GAAG,GAAG,UAAU,EAAEC,OAAO,CAAC,CAAC,CAAC,GAAG,GAAG;EACjE,IAAID,GAAG,IAAI,OAAO,EAAE,OAAO,CAACA,GAAG,GAAG,OAAO,EAAEC,OAAO,CAAC,CAAC,CAAC,GAAG,GAAG;EAC3D,IAAID,GAAG,IAAI,IAAI,EAAE,OAAO,CAACA,GAAG,GAAG,IAAI,EAAEC,OAAO,CAAC,CAAC,CAAC,GAAG,GAAG;EACrD,OAAOD,GAAG,CAACE,QAAQ,CAAC,CAAC;AACvB;AAEA,OAAO,SAASC,YAAYA,CAACC,SAAiB,EAAU;EACtD,QAAQA,SAAS,CAACC,WAAW,CAAC,CAAC;IAC7B,KAAK,KAAK;MAAE,OAAO,6BAA6B;IAChD,KAAK,QAAQ;MAAE,OAAO,+BAA+B;IACrD,KAAK,MAAM;MAAE,OAAO,yBAAyB;IAC7C;MAAS,OAAO,2BAA2B;EAC7C;AACF;AAEA,OAAO,eAAeC,qBAAqBA,CAACC,YAAoB,EAA+B;EAC7F,MAAM;IAAEC,IAAI;IAAEC;EAAM,CAAC,GAAG,MAAMhB,QAAQ,CAACiB,SAAS,CAACC,MAAM,CAAC,uBAAuB,EAAE;IAC/EC,IAAI,EAAE;MAAEL;IAAa;EACvB,CAAC,CAAC;EACF,IAAIE,KAAK,EAAE,MAAM,IAAII,KAAK,CAAC,yBAAyB,CAAC;EACrD,OAAOL,IAAI;AACb;AAEA,OAAO,eAAeM,oBAAoBA,CAACC,QAAgB,EAA+B;EACxF,MAAM;IAAEP,IAAI;IAAEC;EAAM,CAAC,GAAG,MAAMhB,QAAQ,CAACiB,SAAS,CAACC,MAAM,CAAC,sBAAsB,EAAE;IAC9EC,IAAI,EAAE;MAAEG;IAAS;EACnB,CAAC,CAAC;EACF,IAAIN,KAAK,EAAE,MAAM,IAAII,KAAK,CAAC,wBAAwB,CAAC;EACpD,OAAOL,IAAI;AACb;AAEA,OAAO,eAAeQ,qBAAqBA,CAACD,QAAgB,EAA+B;EACzF,MAAM,IAAIF,KAAK,CAAC,yCAAyC,CAAC;AAC5D;AAEA,OAAO,eAAeI,uBAAuBA,CAACF,QAAgB,EAA+B;EAC3F,MAAM,IAAIF,KAAK,CAAC,2CAA2C,CAAC;AAC9D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}