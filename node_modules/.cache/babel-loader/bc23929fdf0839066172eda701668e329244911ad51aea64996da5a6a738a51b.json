{"ast":null,"code":"// ClippIntell Bot Detection MVP - Complete Bot Detection Engine\n\n// Enhanced mock data generator with realistic variation\nclass SocialMediaScraper {\n  async scrapeAccountData(account) {\n    // Generate varied mock data based on account handle\n    const suspiciousKeywords = ['bot', 'fake', '2024', '2023', 'auto', 'spam', 'promo', 'follow4follow', 'f4f', 'like4like', 'l4l'];\n    const isSuspicious = suspiciousKeywords.some(keyword => account.handle.toLowerCase().includes(keyword));\n\n    // Base metrics with variation\n    let baseFollowers = Math.floor(Math.random() * 30000 + 500);\n    let followingMultiplier = Math.random() * 3 + 0.5;\n\n    // Make suspicious accounts have obvious red flags\n    if (isSuspicious) {\n      baseFollowers = Math.floor(Math.random() * 50000 + 10000); // Higher followers\n      followingMultiplier = Math.random() * 10 + 5; // Following way more people\n    }\n    const baseMetrics = {\n      followers: baseFollowers,\n      following: Math.floor(baseFollowers * followingMultiplier / 10),\n      posts: isSuspicious ? Math.floor(Math.random() * 20 + 5) : Math.floor(Math.random() * 300 + 50),\n      avgLikes: 0,\n      avgComments: 0,\n      engagementRate: 0,\n      followerToFollowingRatio: 0\n    };\n\n    // Platform-specific metrics\n    if (account.platform === 'tiktok' || account.platform === 'youtube') {\n      baseMetrics.avgViews = Math.floor(baseMetrics.followers * (Math.random() * 0.3 + 0.1));\n    }\n\n    // Calculate engagement based on suspicion level\n    let engagementBase = isSuspicious ? Math.random() > 0.5 ? Math.random() * 0.15 : Math.random() * 0.005 :\n    // Very high or very low\n    Math.random() * 0.05 + 0.015; // Normal range\n\n    baseMetrics.avgLikes = Math.floor(baseMetrics.followers * engagementBase);\n    baseMetrics.avgComments = Math.floor(baseMetrics.avgLikes * (Math.random() * 0.15 + 0.05));\n    baseMetrics.engagementRate = (baseMetrics.avgLikes + baseMetrics.avgComments) / baseMetrics.followers * 100;\n    baseMetrics.followerToFollowingRatio = baseMetrics.followers / baseMetrics.following;\n\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 1500 + Math.random() * 2000));\n    return baseMetrics;\n  }\n}\n\n// Enhanced bot analyzer with realistic scoring\nexport class BotAnalyzer {\n  constructor() {\n    this.scraper = void 0;\n    this.scraper = new SocialMediaScraper();\n  }\n  async analyzeAccount(account) {\n    const startTime = Date.now();\n    try {\n      console.log(`Analyzing ${account.handle} on ${account.platform}`);\n\n      // Get metrics\n      const metrics = await this.scraper.scrapeAccountData(account);\n      console.log('Scraped metrics:', metrics);\n\n      // Enhanced rule-based analysis\n      const signals = this.analyzeSignals(account, metrics);\n      console.log('Analysis signals:', signals);\n\n      // Calculate bot score\n      const botScore = this.calculateBotScore(metrics, signals);\n      const riskLevel = this.determineRiskLevel(botScore);\n\n      // Generate red flags and recommendations\n      const redFlags = this.identifyRedFlags(account, metrics, signals);\n      const recommendations = this.generateRecommendations(riskLevel, redFlags, botScore);\n      const processingTime = (Date.now() - startTime) / 1000;\n      const result = {\n        id: this.generateAnalysisId(),\n        account,\n        botScore,\n        riskLevel,\n        signals,\n        metrics,\n        redFlags,\n        recommendations,\n        confidence: this.calculateConfidence(metrics, signals),\n        analysisDate: new Date().toISOString(),\n        processingTime\n      };\n      console.log('Analysis complete:', result);\n      return result;\n    } catch (error) {\n      console.error('Analysis failed:', error);\n      throw new Error(`Analysis failed: ${error.message}`);\n    }\n  }\n  analyzeSignals(account, metrics) {\n    const suspiciousKeywords = ['bot', 'fake', '2024', '2023', 'auto', 'spam', 'promo', 'follow4follow', 'f4f', 'like4like', 'l4l'];\n    const hasSuspiciousName = suspiciousKeywords.some(keyword => account.handle.toLowerCase().includes(keyword));\n\n    // Follower quality analysis\n    let followerQuality = 'normal';\n    if (hasSuspiciousName || metrics.followerToFollowingRatio < 0.1) {\n      followerQuality = 'suspicious';\n    }\n    if (metrics.followerToFollowingRatio < 0.05) {\n      followerQuality = 'fake';\n    }\n\n    // Engagement pattern analysis\n    let engagementPattern = 'organic';\n    if (metrics.engagementRate > 10 || metrics.engagementRate < 0.3) {\n      engagementPattern = 'suspicious';\n    }\n    if (metrics.engagementRate > 15 || metrics.engagementRate < 0.1 && metrics.followers > 1000) {\n      engagementPattern = 'automated';\n    }\n\n    // Content consistency analysis\n    let contentConsistency = 'good';\n    if (metrics.posts < 10) {\n      contentConsistency = 'poor';\n    }\n    if (hasSuspiciousName && metrics.posts < 20) {\n      contentConsistency = 'inconsistent';\n    }\n\n    // Account age estimation\n    let accountAge = 'established';\n    if (metrics.followers < 500 || metrics.posts < 20 && metrics.followers < 2000) {\n      accountAge = 'recent';\n    }\n    if (metrics.followers < 100 || metrics.posts < 5) {\n      accountAge = 'very_new';\n    }\n\n    // Profile completeness estimation\n    let profileCompleteness = 'complete';\n    if (hasSuspiciousName) {\n      profileCompleteness = Math.random() > 0.6 ? 'incomplete' : 'minimal';\n    } else {\n      profileCompleteness = Math.random() > 0.8 ? 'incomplete' : 'complete';\n    }\n    return {\n      followerQuality,\n      engagementPattern,\n      contentConsistency,\n      accountAge,\n      profileCompleteness\n    };\n  }\n  calculateBotScore(metrics, signals) {\n    let score = 0;\n\n    // Follower quality (30% weight)\n    if (signals.followerQuality === 'fake') score += 30;else if (signals.followerQuality === 'suspicious') score += 20;\n\n    // Engagement pattern (25% weight)\n    if (signals.engagementPattern === 'automated') score += 25;else if (signals.engagementPattern === 'suspicious') score += 15;\n\n    // Content consistency (20% weight)\n    if (signals.contentConsistency === 'poor') score += 20;else if (signals.contentConsistency === 'inconsistent') score += 15;\n\n    // Account age (15% weight)\n    if (signals.accountAge === 'very_new') score += 15;else if (signals.accountAge === 'recent') score += 8;\n\n    // Profile completeness (10% weight)\n    if (signals.profileCompleteness === 'minimal') score += 10;else if (signals.profileCompleteness === 'incomplete') score += 5;\n\n    // Metric-based adjustments\n    if (metrics.followerToFollowingRatio < 0.1) score += 10;\n    if (metrics.followerToFollowingRatio < 0.05) score += 15;\n    if (metrics.engagementRate > 10) score += 12;\n    if (metrics.engagementRate > 15) score += 18;\n    if (metrics.engagementRate < 0.3) score += 8;\n    if (metrics.engagementRate < 0.1 && metrics.followers > 1000) score += 15;\n\n    // Posts to followers ratio\n    const postsToFollowersRatio = metrics.posts / metrics.followers;\n    if (postsToFollowersRatio < 0.001 && metrics.followers > 5000) score += 10; // Too few posts for follower count\n\n    return Math.min(100, Math.max(0, score));\n  }\n  determineRiskLevel(botScore) {\n    if (botScore >= 70) return 'high';\n    if (botScore >= 40) return 'medium';\n    return 'low';\n  }\n  identifyRedFlags(account, metrics, signals) {\n    const flags = [];\n\n    // Account name red flags\n    const suspiciousKeywords = ['bot', 'fake', '2024', '2023', 'auto', 'spam', 'promo'];\n    if (suspiciousKeywords.some(keyword => account.handle.toLowerCase().includes(keyword))) {\n      flags.push('Suspicious keywords detected in account handle');\n    }\n\n    // Signal-based red flags\n    if (signals.followerQuality === 'fake') {\n      flags.push('High percentage of fake followers detected');\n    }\n    if (signals.engagementPattern === 'automated') {\n      flags.push('Automated engagement patterns detected');\n    }\n    if (signals.contentConsistency === 'poor') {\n      flags.push('Very low content output for account size');\n    }\n\n    // Metric-based red flags\n    if (metrics.followerToFollowingRatio < 0.1) {\n      flags.push(`Suspicious follower-to-following ratio (${metrics.followerToFollowingRatio.toFixed(2)})`);\n    }\n    if (metrics.engagementRate > 10) {\n      flags.push(`Unrealistically high engagement rate (${metrics.engagementRate.toFixed(2)}%)`);\n    }\n    if (metrics.engagementRate < 0.3 && metrics.followers > 1000) {\n      flags.push(`Suspiciously low engagement rate for follower count (${metrics.engagementRate.toFixed(2)}%)`);\n    }\n    if (signals.accountAge === 'very_new' && metrics.followers > 5000) {\n      flags.push('Very new account with unusually high follower count');\n    }\n    if (metrics.posts < 10 && metrics.followers > 10000) {\n      flags.push('High follower count with very few posts');\n    }\n\n    // Platform-specific red flags\n    if (account.platform === 'instagram' && metrics.engagementRate > 8) {\n      flags.push('Instagram engagement rate exceeds typical organic levels');\n    }\n    if (account.platform === 'twitter' && metrics.followerToFollowingRatio < 0.05) {\n      flags.push('Twitter follow-back pattern indicates potential bot behavior');\n    }\n    return flags;\n  }\n  generateRecommendations(riskLevel, redFlags, botScore) {\n    const recommendations = [];\n    switch (riskLevel) {\n      case 'high':\n        recommendations.push('❌ REJECT - High bot probability detected');\n        recommendations.push('Do not approve for content rewards program');\n        if (botScore >= 80) {\n          recommendations.push('Account shows multiple clear indicators of automated behavior');\n        }\n        recommendations.push('Consider manual review only if account has verifiable authentic content');\n        break;\n      case 'medium':\n        recommendations.push('⚠️ CAUTION - Manual review required');\n        recommendations.push('Request additional verification before approval');\n        recommendations.push('Ask for recent authentic content examples');\n        recommendations.push('Consider requiring phone verification');\n        if (redFlags.length >= 3) {\n          recommendations.push('Multiple red flags detected - proceed with extra caution');\n        }\n        break;\n      case 'low':\n        recommendations.push('✅ APPROVE - Low risk detected');\n        recommendations.push('Proceed with standard verification process');\n        recommendations.push('Account appears to have organic engagement patterns');\n        if (redFlags.length === 0) {\n          recommendations.push('No significant red flags identified');\n        }\n        break;\n    }\n    if (redFlags.length > 0) {\n      recommendations.push(`Found ${redFlags.length} red flag(s) - review details above`);\n    }\n\n    // Additional context-based recommendations\n    if (botScore > 0 && botScore < 30) {\n      recommendations.push('Account shows mostly authentic behavior patterns');\n    }\n    return recommendations;\n  }\n  calculateConfidence(metrics, signals) {\n    let confidence = 70; // Base confidence\n\n    // Increase confidence based on clear indicators\n    if (metrics.followerToFollowingRatio < 0.05 || metrics.followerToFollowingRatio > 10) {\n      confidence += 15;\n    }\n    if (metrics.engagementRate > 12 || metrics.engagementRate < 0.2) {\n      confidence += 10;\n    }\n    if (signals.contentConsistency === 'poor' && metrics.followers > 5000) {\n      confidence += 10;\n    }\n\n    // Decrease confidence for edge cases\n    if (metrics.engagementRate > 2 && metrics.engagementRate < 6) {\n      confidence -= 5; // Normal range, harder to determine\n    }\n    return Math.min(95, Math.max(60, confidence));\n  }\n  generateAnalysisId() {\n    return `analysis_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n}\nexport const botAnalyzer = new BotAnalyzer();","map":{"version":3,"names":["SocialMediaScraper","scrapeAccountData","account","suspiciousKeywords","isSuspicious","some","keyword","handle","toLowerCase","includes","baseFollowers","Math","floor","random","followingMultiplier","baseMetrics","followers","following","posts","avgLikes","avgComments","engagementRate","followerToFollowingRatio","platform","avgViews","engagementBase","Promise","resolve","setTimeout","BotAnalyzer","constructor","scraper","analyzeAccount","startTime","Date","now","console","log","metrics","signals","analyzeSignals","botScore","calculateBotScore","riskLevel","determineRiskLevel","redFlags","identifyRedFlags","recommendations","generateRecommendations","processingTime","result","id","generateAnalysisId","confidence","calculateConfidence","analysisDate","toISOString","error","Error","message","hasSuspiciousName","followerQuality","engagementPattern","contentConsistency","accountAge","profileCompleteness","score","postsToFollowersRatio","min","max","flags","push","toFixed","length","toString","substr","botAnalyzer"],"sources":["/Users/chrism2homefolder/Desktop/ClippIntelProject/src/components/botDetection.ts"],"sourcesContent":["// ClippIntell Bot Detection MVP - Complete Bot Detection Engine\n\nimport { \n  BotAnalysisResult, \n  SocialAccount, \n  BotSignals, \n  AccountMetrics, \n  BotRiskLevel \n} from '../types';\n\n// Enhanced mock data generator with realistic variation\nclass SocialMediaScraper {\n  async scrapeAccountData(account: SocialAccount): Promise<AccountMetrics> {\n    // Generate varied mock data based on account handle\n    const suspiciousKeywords = ['bot', 'fake', '2024', '2023', 'auto', 'spam', 'promo', 'follow4follow', 'f4f', 'like4like', 'l4l'];\n    const isSuspicious = suspiciousKeywords.some(keyword => \n      account.handle.toLowerCase().includes(keyword)\n    );\n\n    // Base metrics with variation\n    let baseFollowers = Math.floor(Math.random() * 30000 + 500);\n    let followingMultiplier = Math.random() * 3 + 0.5;\n    \n    // Make suspicious accounts have obvious red flags\n    if (isSuspicious) {\n      baseFollowers = Math.floor(Math.random() * 50000 + 10000); // Higher followers\n      followingMultiplier = Math.random() * 10 + 5; // Following way more people\n    }\n\n    const baseMetrics = {\n      followers: baseFollowers,\n      following: Math.floor(baseFollowers * followingMultiplier / 10),\n      posts: isSuspicious ? Math.floor(Math.random() * 20 + 5) : Math.floor(Math.random() * 300 + 50),\n      avgLikes: 0,\n      avgComments: 0,\n      engagementRate: 0,\n      followerToFollowingRatio: 0\n    };\n\n    // Platform-specific metrics\n    if (account.platform === 'tiktok' || account.platform === 'youtube') {\n      baseMetrics.avgViews = Math.floor(baseMetrics.followers * (Math.random() * 0.3 + 0.1));\n    }\n\n    // Calculate engagement based on suspicion level\n    let engagementBase = isSuspicious ? \n      (Math.random() > 0.5 ? Math.random() * 0.15 : Math.random() * 0.005) : // Very high or very low\n      Math.random() * 0.05 + 0.015; // Normal range\n\n    baseMetrics.avgLikes = Math.floor(baseMetrics.followers * engagementBase);\n    baseMetrics.avgComments = Math.floor(baseMetrics.avgLikes * (Math.random() * 0.15 + 0.05));\n    baseMetrics.engagementRate = ((baseMetrics.avgLikes + baseMetrics.avgComments) / baseMetrics.followers) * 100;\n    baseMetrics.followerToFollowingRatio = baseMetrics.followers / baseMetrics.following;\n\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 1500 + Math.random() * 2000));\n\n    return baseMetrics;\n  }\n}\n\n// Enhanced bot analyzer with realistic scoring\nexport class BotAnalyzer {\n  private scraper: SocialMediaScraper;\n\n  constructor() {\n    this.scraper = new SocialMediaScraper();\n  }\n\n  async analyzeAccount(account: SocialAccount): Promise<BotAnalysisResult> {\n    const startTime = Date.now();\n\n    try {\n      console.log(`Analyzing ${account.handle} on ${account.platform}`);\n\n      // Get metrics\n      const metrics = await this.scraper.scrapeAccountData(account);\n      console.log('Scraped metrics:', metrics);\n\n      // Enhanced rule-based analysis\n      const signals = this.analyzeSignals(account, metrics);\n      console.log('Analysis signals:', signals);\n\n      // Calculate bot score\n      const botScore = this.calculateBotScore(metrics, signals);\n      const riskLevel = this.determineRiskLevel(botScore);\n\n      // Generate red flags and recommendations\n      const redFlags = this.identifyRedFlags(account, metrics, signals);\n      const recommendations = this.generateRecommendations(riskLevel, redFlags, botScore);\n\n      const processingTime = (Date.now() - startTime) / 1000;\n\n      const result: BotAnalysisResult = {\n        id: this.generateAnalysisId(),\n        account,\n        botScore,\n        riskLevel,\n        signals,\n        metrics,\n        redFlags,\n        recommendations,\n        confidence: this.calculateConfidence(metrics, signals),\n        analysisDate: new Date().toISOString(),\n        processingTime\n      };\n\n      console.log('Analysis complete:', result);\n      return result;\n\n    } catch (error) {\n      console.error('Analysis failed:', error);\n      throw new Error(`Analysis failed: ${error.message}`);\n    }\n  }\n\n  private analyzeSignals(account: SocialAccount, metrics: AccountMetrics): BotSignals {\n    const suspiciousKeywords = ['bot', 'fake', '2024', '2023', 'auto', 'spam', 'promo', 'follow4follow', 'f4f', 'like4like', 'l4l'];\n    const hasSuspiciousName = suspiciousKeywords.some(keyword => \n      account.handle.toLowerCase().includes(keyword)\n    );\n\n    // Follower quality analysis\n    let followerQuality: 'normal' | 'suspicious' | 'fake' = 'normal';\n    if (hasSuspiciousName || metrics.followerToFollowingRatio < 0.1) {\n      followerQuality = 'suspicious';\n    }\n    if (metrics.followerToFollowingRatio < 0.05) {\n      followerQuality = 'fake';\n    }\n\n    // Engagement pattern analysis\n    let engagementPattern: 'organic' | 'automated' | 'suspicious' = 'organic';\n    if (metrics.engagementRate > 10 || metrics.engagementRate < 0.3) {\n      engagementPattern = 'suspicious';\n    }\n    if (metrics.engagementRate > 15 || (metrics.engagementRate < 0.1 && metrics.followers > 1000)) {\n      engagementPattern = 'automated';\n    }\n\n    // Content consistency analysis\n    let contentConsistency: 'good' | 'poor' | 'inconsistent' = 'good';\n    if (metrics.posts < 10) {\n      contentConsistency = 'poor';\n    }\n    if (hasSuspiciousName && metrics.posts < 20) {\n      contentConsistency = 'inconsistent';\n    }\n\n    // Account age estimation\n    let accountAge: 'established' | 'recent' | 'very_new' = 'established';\n    if (metrics.followers < 500 || (metrics.posts < 20 && metrics.followers < 2000)) {\n      accountAge = 'recent';\n    }\n    if (metrics.followers < 100 || metrics.posts < 5) {\n      accountAge = 'very_new';\n    }\n\n    // Profile completeness estimation\n    let profileCompleteness: 'complete' | 'incomplete' | 'minimal' = 'complete';\n    if (hasSuspiciousName) {\n      profileCompleteness = Math.random() > 0.6 ? 'incomplete' : 'minimal';\n    } else {\n      profileCompleteness = Math.random() > 0.8 ? 'incomplete' : 'complete';\n    }\n\n    return {\n      followerQuality,\n      engagementPattern,\n      contentConsistency,\n      accountAge,\n      profileCompleteness\n    };\n  }\n\n  private calculateBotScore(metrics: AccountMetrics, signals: BotSignals): number {\n    let score = 0;\n\n    // Follower quality (30% weight)\n    if (signals.followerQuality === 'fake') score += 30;\n    else if (signals.followerQuality === 'suspicious') score += 20;\n\n    // Engagement pattern (25% weight)\n    if (signals.engagementPattern === 'automated') score += 25;\n    else if (signals.engagementPattern === 'suspicious') score += 15;\n\n    // Content consistency (20% weight)\n    if (signals.contentConsistency === 'poor') score += 20;\n    else if (signals.contentConsistency === 'inconsistent') score += 15;\n\n    // Account age (15% weight)\n    if (signals.accountAge === 'very_new') score += 15;\n    else if (signals.accountAge === 'recent') score += 8;\n\n    // Profile completeness (10% weight)\n    if (signals.profileCompleteness === 'minimal') score += 10;\n    else if (signals.profileCompleteness === 'incomplete') score += 5;\n\n    // Metric-based adjustments\n    if (metrics.followerToFollowingRatio < 0.1) score += 10;\n    if (metrics.followerToFollowingRatio < 0.05) score += 15;\n    if (metrics.engagementRate > 10) score += 12;\n    if (metrics.engagementRate > 15) score += 18;\n    if (metrics.engagementRate < 0.3) score += 8;\n    if (metrics.engagementRate < 0.1 && metrics.followers > 1000) score += 15;\n\n    // Posts to followers ratio\n    const postsToFollowersRatio = metrics.posts / metrics.followers;\n    if (postsToFollowersRatio < 0.001 && metrics.followers > 5000) score += 10; // Too few posts for follower count\n\n    return Math.min(100, Math.max(0, score));\n  }\n\n  private determineRiskLevel(botScore: number): BotRiskLevel {\n    if (botScore >= 70) return 'high';\n    if (botScore >= 40) return 'medium';\n    return 'low';\n  }\n\n  private identifyRedFlags(account: SocialAccount, metrics: AccountMetrics, signals: BotSignals): string[] {\n    const flags: string[] = [];\n\n    // Account name red flags\n    const suspiciousKeywords = ['bot', 'fake', '2024', '2023', 'auto', 'spam', 'promo'];\n    if (suspiciousKeywords.some(keyword => account.handle.toLowerCase().includes(keyword))) {\n      flags.push('Suspicious keywords detected in account handle');\n    }\n\n    // Signal-based red flags\n    if (signals.followerQuality === 'fake') {\n      flags.push('High percentage of fake followers detected');\n    }\n    if (signals.engagementPattern === 'automated') {\n      flags.push('Automated engagement patterns detected');\n    }\n    if (signals.contentConsistency === 'poor') {\n      flags.push('Very low content output for account size');\n    }\n\n    // Metric-based red flags\n    if (metrics.followerToFollowingRatio < 0.1) {\n      flags.push(`Suspicious follower-to-following ratio (${metrics.followerToFollowingRatio.toFixed(2)})`);\n    }\n    if (metrics.engagementRate > 10) {\n      flags.push(`Unrealistically high engagement rate (${metrics.engagementRate.toFixed(2)}%)`);\n    }\n    if (metrics.engagementRate < 0.3 && metrics.followers > 1000) {\n      flags.push(`Suspiciously low engagement rate for follower count (${metrics.engagementRate.toFixed(2)}%)`);\n    }\n    if (signals.accountAge === 'very_new' && metrics.followers > 5000) {\n      flags.push('Very new account with unusually high follower count');\n    }\n    if (metrics.posts < 10 && metrics.followers > 10000) {\n      flags.push('High follower count with very few posts');\n    }\n\n    // Platform-specific red flags\n    if (account.platform === 'instagram' && metrics.engagementRate > 8) {\n      flags.push('Instagram engagement rate exceeds typical organic levels');\n    }\n    if (account.platform === 'twitter' && metrics.followerToFollowingRatio < 0.05) {\n      flags.push('Twitter follow-back pattern indicates potential bot behavior');\n    }\n\n    return flags;\n  }\n\n  private generateRecommendations(riskLevel: BotRiskLevel, redFlags: string[], botScore: number): string[] {\n    const recommendations: string[] = [];\n\n    switch (riskLevel) {\n      case 'high':\n        recommendations.push('❌ REJECT - High bot probability detected');\n        recommendations.push('Do not approve for content rewards program');\n        if (botScore >= 80) {\n          recommendations.push('Account shows multiple clear indicators of automated behavior');\n        }\n        recommendations.push('Consider manual review only if account has verifiable authentic content');\n        break;\n      case 'medium':\n        recommendations.push('⚠️ CAUTION - Manual review required');\n        recommendations.push('Request additional verification before approval');\n        recommendations.push('Ask for recent authentic content examples');\n        recommendations.push('Consider requiring phone verification');\n        if (redFlags.length >= 3) {\n          recommendations.push('Multiple red flags detected - proceed with extra caution');\n        }\n        break;\n      case 'low':\n        recommendations.push('✅ APPROVE - Low risk detected');\n        recommendations.push('Proceed with standard verification process');\n        recommendations.push('Account appears to have organic engagement patterns');\n        if (redFlags.length === 0) {\n          recommendations.push('No significant red flags identified');\n        }\n        break;\n    }\n\n    if (redFlags.length > 0) {\n      recommendations.push(`Found ${redFlags.length} red flag(s) - review details above`);\n    }\n\n    // Additional context-based recommendations\n    if (botScore > 0 && botScore < 30) {\n      recommendations.push('Account shows mostly authentic behavior patterns');\n    }\n\n    return recommendations;\n  }\n\n  private calculateConfidence(metrics: AccountMetrics, signals: BotSignals): number {\n    let confidence = 70; // Base confidence\n\n    // Increase confidence based on clear indicators\n    if (metrics.followerToFollowingRatio < 0.05 || metrics.followerToFollowingRatio > 10) {\n      confidence += 15;\n    }\n    if (metrics.engagementRate > 12 || metrics.engagementRate < 0.2) {\n      confidence += 10;\n    }\n    if (signals.contentConsistency === 'poor' && metrics.followers > 5000) {\n      confidence += 10;\n    }\n\n    // Decrease confidence for edge cases\n    if (metrics.engagementRate > 2 && metrics.engagementRate < 6) {\n      confidence -= 5; // Normal range, harder to determine\n    }\n\n    return Math.min(95, Math.max(60, confidence));\n  }\n\n  private generateAnalysisId(): string {\n    return `analysis_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n}\n\nexport const botAnalyzer = new BotAnalyzer();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}