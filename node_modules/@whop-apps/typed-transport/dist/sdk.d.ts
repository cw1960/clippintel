import type { ZodDiscriminatedUnion, ZodLiteral, ZodObject, ZodRawShape, ZodTypeAny, z } from "zod";
export type ValidZodEventSchema = ZodDiscriminatedUnion<"event", ZodObject<{
    event: ZodLiteral<string>;
    request: ZodTypeAny;
    response: ZodTypeAny;
} & ZodRawShape>[]>;
type MaybePromise<T> = Promise<T> | T;
type FullServerImplementation<Schema extends ValidZodEventSchema> = {
    [K in NonNullable<z.infer<Schema>["event"]>]: (request: Extract<z.infer<Schema>, {
        event: K;
    }>["request"]) => MaybePromise<Extract<z.infer<Schema>, {
        event: K;
    }>["response"]>;
};
export type ClientSDK<ClientSchema extends ValidZodEventSchema, Complete extends boolean> = {
    [K in NonNullable<z.infer<ClientSchema>["event"]>]: (req: Extract<z.infer<ClientSchema>, {
        event: K;
    }>["request"]) => Promise<Complete extends true ? Extract<z.infer<ClientSchema>, {
        event: K;
    }>["response"] : Extract<z.infer<ClientSchema>, {
        event: K;
    }>["response"] | undefined>;
};
export type ServerImplementation<Schema extends ValidZodEventSchema, ForceCompleteness extends boolean = false> = ForceCompleteness extends true ? FullServerImplementation<Schema> : Partial<FullServerImplementation<Schema>>;
type FullServerMiddlewareImplementation<Schema extends ValidZodEventSchema, ForceCompleteness extends boolean = false> = {
    [K in NonNullable<z.infer<Schema>["event"]>]: (request: Extract<z.infer<Schema>, {
        event: K;
    }>["request"], next: ForceCompleteness extends true ? (request: Extract<z.infer<Schema>, {
        event: K;
    }>["request"]) => MaybePromise<Extract<z.infer<Schema>, {
        event: K;
    }>["response"]> : ((request: Extract<z.infer<Schema>, {
        event: K;
    }>["request"]) => MaybePromise<Extract<z.infer<Schema>, {
        event: K;
    }>["response"]>) | undefined) => MaybePromise<ForceCompleteness extends true ? Extract<z.infer<Schema>, {
        event: K;
    }>["response"] : Extract<z.infer<Schema>, {
        event: K;
    }>["response"] | undefined>;
};
export type ServerMiddleware<Schema extends ValidZodEventSchema, ForceCompleteness extends boolean = false> = Partial<FullServerMiddlewareImplementation<Schema, ForceCompleteness>>;
export type Transport<ServerSchema extends ValidZodEventSchema | undefined> = {
    send: (event: string, data: unknown, params: {
        localAppId: string;
        remoteAppId: string;
    }) => unknown;
    recv: (handler: (event: string, data: unknown) => Promise<(ServerSchema extends ValidZodEventSchema ? z.infer<ServerSchema>["response"] : undefined) | undefined>, params: {
        localAppId: string;
        remoteAppId: string;
    }) => void | (() => void);
    cleanup?: () => void;
};
export declare function createSDK<ClientSchema extends ValidZodEventSchema | undefined, ServerSchema extends ValidZodEventSchema | undefined, ForceCompleteness extends boolean = false, ServerComplete extends boolean = false>({ clientSchema, serverSchema, serverComplete, transport, timeout, timeouts, localAppId, remoteAppId, serverImplementation, serverMiddleware, }: {
    clientSchema: ClientSchema;
    serverSchema: ServerSchema;
    forceCompleteness?: ForceCompleteness;
    serverComplete?: ServerComplete;
    localAppId: string;
    remoteAppId: string;
    serverMiddleware?: ServerSchema extends ValidZodEventSchema ? ServerMiddleware<ServerSchema, ForceCompleteness>[] : undefined;
    serverImplementation: ServerSchema extends ValidZodEventSchema ? ServerImplementation<ServerSchema, ForceCompleteness> : undefined;
    transport: Transport<ServerSchema>;
    timeout?: number;
    timeouts?: ClientSchema extends ValidZodEventSchema ? {
        [K in NonNullable<z.infer<ClientSchema>["event"]>]?: number;
    } : never;
}): (ClientSchema extends ValidZodEventSchema ? ClientSDK<ClientSchema, ServerComplete> : object) & {
    _cleanupTransport: () => void;
};
export {};
//# sourceMappingURL=sdk.d.ts.map