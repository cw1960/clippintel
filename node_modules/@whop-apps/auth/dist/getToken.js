"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    addNameToGetTokenParams: function() {
        return addNameToGetTokenParams;
    },
    getTokenFromHeaders: function() {
        return getTokenFromHeaders;
    },
    getTokenFromRequest: function() {
        return getTokenFromRequest;
    },
    getToken: function() {
        return getToken;
    }
});
const _cookie = require("cookie");
const _errors = require("./errors");
function addNameToGetTokenParams(params, name) {
    if ("token" in params) return {
        ...params
    };
    return {
        ...params,
        name
    };
}
function getTokenFromHeaders(headers, name = "whop_user_token") {
    const heads = typeof headers === "function" ? headers() : headers;
    const cookieHeader = heads instanceof Headers ? heads.get("cookie") : Array.isArray(heads) ? heads.find(([key])=>key.toLowerCase() === "cookie")?.[1] : heads.cookie ?? heads.Cookie;
    const cookie = (0, _cookie.parse)(cookieHeader ?? "");
    const token = cookie[name];
    return token;
}
function getTokenFromRequest(req, name) {
    return getTokenFromHeaders(req.headers, name);
}
function getToken({ dontThrow, ...rest }) {
    try {
        const tokenString = "token" in rest ? rest.token : "req" in rest ? getTokenFromRequest(rest.req, rest.name) : getTokenFromHeaders(rest.headers, rest.name);
        if (!tokenString) {
            if (process.env.NODE_ENV === "development") {
                console.warn(`No token found in request.
				If you are developing an app in the whop iframe, make sure you are using the 'whop-proxy' package to run your app.
				Read more in the whop SDK Reference.`);
            }
            throw new _errors.AuthError("token-missing");
        }
        return tokenString;
    } catch (error) {
        // This is safe because we know that the user specified dontThrow as true, hence return type may be null
        if (dontThrow) return null;
        throw error;
    }
}
