"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "validateCheckoutSession", {
    enumerable: true,
    get: function() {
        return validateCheckoutSession;
    }
});
const _core = require("@whop-apps/core");
const _jose = require("jose");
const _errors = require("./errors");
const _getToken = require("./getToken");
async function validateCheckoutSession({ jwk, dontThrow, appId: _appId, checkoutSessionId, ...rest }) {
    try {
        const tokenString = (0, _getToken.getToken)((0, _getToken.addNameToGetTokenParams)(rest, `whop_checkout_session_token-${checkoutSessionId}`));
        const jwkString = jwk ?? _core.WhopEnvStore.get(_core.WhopEnv.JWK_PK);
        const key = await (0, _jose.importJWK)(JSON.parse(jwkString), "ES256").catch(()=>{
            throw new _errors.AuthError("invalid-key");
        });
        const token = await (0, _jose.jwtVerify)(tokenString, key, {
            issuer: "urn:whopcom:whop_checkout_session_token"
        }).catch((_e)=>{
            // if (e instanceof JWTExpired) throw new AuthError('token-expired');
            throw new _errors.AuthError("token-invalid");
        });
        if (!(token.payload.aud && token.payload.sess_id) || token.payload.sess_id !== checkoutSessionId || typeof token.payload.sess_id !== "string" || Array.isArray(token.payload.aud)) throw new _errors.AuthError("token-invalid");
        const appId = _core.WhopEnvStore.tryGet(_core.WhopEnv.APP_ID, _appId ?? undefined);
        if (appId && token.payload.aud !== appId) throw new _errors.AuthError("invalid-app-id");
        return {
            appId: token.payload.aud,
            checkoutSessionId: token.payload.sess_id,
            userId: token.payload.sub
        };
    } catch (error) {
        // This is safe because we know that the user specified dontThrow as true, hence return type may be null
        if (dontThrow) return null;
        throw error;
    }
}
