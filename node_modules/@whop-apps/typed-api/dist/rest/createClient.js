/*
Original source code from:

https://github.com/drwpow/openapi-typescript/blob/ee908d0f12bea42eca27d3b33d7bb7814a2f6460/packages/openapi-fetch/src/index.ts

Original License for this file

MIT License

Copyright (c) 2023 Drew Powers

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    FetchError: function() {
        return FetchError;
    },
    createClient: function() {
        return createClient;
    },
    defaultQuerySerializer: function() {
        return defaultQuerySerializer;
    },
    defaultBodySerializer: function() {
        return defaultBodySerializer;
    },
    createFinalURL: function() {
        return createFinalURL;
    },
    mergeHeaders: function() {
        return mergeHeaders;
    }
});
const _core = require("@whop-apps/core");
// settings & const
const DEFAULT_HEADERS = {
    "Content-Type": "application/json"
};
const TRAILING_SLASH_RE = /\/*$/;
class FetchError extends Error {
    constructor(message){
        super(message ?? "Network request failed");
    }
}
function createClient(clientOptions = {}) {
    const { fetch = globalThis.fetch, querySerializer: globalQuerySerializer, bodySerializer: globalBodySerializer, ...options } = clientOptions;
    async function coreFetch(url, fetchOptions) {
        try {
            const { headers, body: requestBody, params = {}, parseAs = "json", querySerializer = globalQuerySerializer ?? defaultQuerySerializer, bodySerializer = globalBodySerializer ?? defaultBodySerializer, ...init } = fetchOptions || {};
            // URL
            const finalURL = createFinalURL(url, {
                baseUrl: options.baseUrl,
                params,
                querySerializer
            });
            const finalHeaders = mergeHeaders(DEFAULT_HEADERS, clientOptions?.headers, headers, params.header);
            // fetch!
            const requestInit = {
                redirect: "follow",
                ...options,
                ...init,
                headers: finalHeaders
            };
            if (requestBody) requestInit.body = bodySerializer(requestBody);
            // remove `Content-Type` if serialized body is FormData; browser will correctly set Content-Type & boundary expression
            if (requestInit.body instanceof FormData) finalHeaders.delete("Content-Type");
            const response = await fetch(finalURL, requestInit);
            // handle empty content
            // note: we return `{}` because we want user truthy checks for `.data` or `.error` to succeed
            if (response.status === 204 || response.headers.get("Content-Length") === "0") {
                return response.ok ? (0, _core.Ok)({}, {
                    response
                }) : (0, _core.Err)(new FetchError("No content returned from server"), {
                    response
                });
            }
            // parse response (falling back to .text() when necessary)
            if (response.ok) {
                let data = response.body;
                if (parseAs !== "stream") {
                    const cloned = response.clone();
                    data = typeof cloned[parseAs] === "function" ? await cloned[parseAs]() : await cloned.text();
                }
                return (0, _core.Ok)(data, {
                    response
                });
            }
            // handle errors (always parse as .json() or .text())
            let error = {};
            try {
                error = await response.clone().json();
            } catch  {
                error = await response.clone().text();
            }
            return (0, _core.Err)(error, {
                response
            });
        } catch (error) {
            const message = error instanceof Error ? error.message : String(error);
            return (0, _core.Err)(new FetchError(message), {
                response: null
            });
        }
    }
    return {
        /** Call a GET endpoint */ GET (url, init) {
            return coreFetch(url, {
                ...init,
                method: "GET"
            });
        },
        /** Call a PUT endpoint */ PUT (url, init) {
            return coreFetch(url, {
                ...init,
                method: "PUT"
            });
        },
        /** Call a POST endpoint */ POST (url, init) {
            return coreFetch(url, {
                ...init,
                method: "POST"
            });
        },
        /** Call a DELETE endpoint */ DELETE (url, init) {
            return coreFetch(url, {
                ...init,
                method: "DELETE"
            });
        },
        /** Call a OPTIONS endpoint */ OPTIONS (url, init) {
            return coreFetch(url, {
                ...init,
                method: "OPTIONS"
            });
        },
        /** Call a HEAD endpoint */ HEAD (url, init) {
            return coreFetch(url, {
                ...init,
                method: "HEAD"
            });
        },
        /** Call a PATCH endpoint */ PATCH (url, init) {
            return coreFetch(url, {
                ...init,
                method: "PATCH"
            });
        },
        /** Call a TRACE endpoint */ TRACE (url, init) {
            return coreFetch(url, {
                ...init,
                method: "TRACE"
            });
        }
    };
}
function defaultQuerySerializer(q) {
    const search = new URLSearchParams();
    if (q && typeof q === "object") {
        for (const [k, v] of Object.entries(q)){
            if (v === undefined || v === null) continue;
            search.set(k, v);
        }
    }
    return search.toString();
}
function defaultBodySerializer(body) {
    return JSON.stringify(body);
}
function createFinalURL(url, options) {
    let finalURL = `${options.baseUrl ? options.baseUrl.replace(TRAILING_SLASH_RE, "") : ""}${url}`;
    if (options.params.path) {
        for (const [k, v] of Object.entries(options.params.path))finalURL = finalURL.replace(`{${k}}`, encodeURIComponent(String(v)));
    }
    if (options.params.query) {
        const search = options.querySerializer(options.params.query);
        if (search) finalURL += `?${search}`;
    }
    return finalURL;
}
function mergeHeaders(...allHeaders) {
    const headers = new Headers();
    for (const headerSet of allHeaders){
        if (!headerSet || typeof headerSet !== "object") continue;
        const iterator = headerSet instanceof Headers ? headerSet.entries() : Object.entries(headerSet);
        for (const [k, v] of iterator){
            if (v === null) {
                headers.delete(k);
            } else if (v !== undefined) {
                headers.set(k, v);
            }
        }
    }
    return headers;
}
