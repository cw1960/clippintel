"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    parseCliArgs: function() {
        return parseCliArgs;
    },
    pullSchema: function() {
        return pullSchema;
    }
});
const _promises = require("node:fs/promises");
const _nodepath = require("node:path");
const _nodeutil = require("node:util");
function parseCliArgs() {
    const { values } = (0, _nodeutil.parseArgs)({
        options: {
            schemaUrl: {
                type: "string",
                short: "s"
            },
            schemaPath: {
                type: "string",
                short: "p"
            }
        }
    });
    return {
        schemaUrl: values.schemaUrl,
        schemaPath: values.schemaPath
    };
}
async function fetchSchema(schemaUrl) {
    const response = await fetch(schemaUrl);
    if (!response.ok) throw new Error(`Could not pull schema from ${schemaUrl}`);
    const schema = await response.text();
    return schema;
}
async function saveSchema(schema, path) {
    const p = (0, _nodepath.join)(process.cwd(), path);
    await (0, _promises.writeFile)(p, schema, "utf-8");
}
async function pullSchema() {
    const { schemaUrl, schemaPath } = parseCliArgs();
    if (!schemaUrl) throw new Error("No schemaUrl provided");
    if (!schemaPath) throw new Error("No schemaPath provided");
    const schema = await fetchSchema(schemaUrl);
    await saveSchema(schema, schemaPath);
}
