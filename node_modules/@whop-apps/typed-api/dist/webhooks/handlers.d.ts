export type Handlers<Webhooks> = {
    [K in keyof Webhooks[keyof Webhooks]]: MethodHandlers<Webhooks, K>;
};
export type MethodHandlers<Webhooks, Method extends keyof Webhooks[keyof Webhooks]> = {
    [K in keyof Webhooks as K extends string ? Webhooks[K] extends Record<Method, WebhookData<{
        action: string;
    }>> ? MakeCamelCase<Webhooks[K][Method]["requestBody"]["content"]["application/json"]["action"]> : never : never]?: Webhooks[K][Method] extends WebhookData<infer Data> ? (data: Data, options: {
        log: (...args: any[]) => void;
    }) => Webhooks[K][Method] extends WebhookResponse<infer R> ? MaybePromise<R> : MaybePromise<void> : never;
};
type MakeCamelCase<T extends string> = T extends `${infer F}_${infer R}` ? `${MakeCamelCaseDash<F>}${Capitalize<MakeCamelCase<R>>}` : MakeCamelCaseDash<T>;
type MakeCamelCaseDash<T extends string> = T extends `${infer F}-${infer R}` ? `${MakeCamelCaseDot<F>}${Capitalize<MakeCamelCaseDash<R>>}` : MakeCamelCaseDot<T>;
type MakeCamelCaseDot<T extends string> = T extends `${infer F}.${infer R}` ? `${F}${Capitalize<MakeCamelCaseDot<R>>}` : T;
type MaybePromise<T> = T | Promise<T>;
type WebhookData<Data> = {
    requestBody: {
        content: {
            "application/json": Data;
        };
    };
};
type WebhookResponse<Response> = {
    responses: {
        default: {
            content: {
                "application/json": Response;
            };
        };
    };
};
export declare function transformToCamelCase<T extends string | undefined | null>(str: T): T;
export {};
//# sourceMappingURL=handlers.d.ts.map