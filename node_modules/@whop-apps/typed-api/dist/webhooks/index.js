"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "createWebhookHandler", {
    enumerable: true,
    get: function() {
        return createWebhookHandler;
    }
});
const _handlers = require("./handlers");
const _validate = require("./validate");
class HttpError extends Error {
    status;
    constructor(status, message){
        super(message);
        this.status = status;
    }
}
function createWebhookHandler({ signatureHeaderName, signatureKey }) {
    const validator = (0, _validate.makeRequestValidator)({
        key: signatureKey,
        headerName: signatureHeaderName
    });
    const handler = async (req, handlers)=>{
        try {
            const data = await validator(req);
            if (!data) throw new HttpError(400, "Invalid request - unable to validate signature");
            if (typeof data !== "object" || !("action" in data) || typeof data.action !== "string") {
                throw new HttpError(400, "Invalid request - missing type or eventData");
            }
            const handlerKey = (0, _handlers.transformToCamelCase)(data.action);
            if (!(handlerKey in handlers)) {
                throw new HttpError(404, `No handler for event type ${data.action}`);
            }
            const handler = handlers[handlerKey];
            const logs = [];
            const log = (...args)=>{
                const l = args.length === 1 ? args[0] : args;
                logs.push(l);
            };
            const response = await handler(data, {
                log
            });
            return new Response(JSON.stringify({
                status: "ok",
                response,
                logs
            }), {
                status: 200
            });
        } catch (error) {
            let code = 500;
            let message = "Unknown error";
            if (error instanceof HttpError) {
                code = error.status;
                message = error.message;
            } else if (error instanceof Error) {
                message = error.message;
            } else if (typeof error === "string") {
                message = error;
            }
            return new Response(JSON.stringify({
                status: "error",
                message
            }), {
                status: code
            });
        }
    };
    const allHandlers = {
        getHandler: handler,
        postHandler: handler,
        putHandler: handler,
        deleteHandler: handler,
        headHandler: handler,
        optionsHandler: handler,
        patchHandler: handler,
        traceHandler: handler
    };
    return allHandlers;
}
