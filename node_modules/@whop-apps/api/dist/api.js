"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    makeApi: function() {
        return makeApi;
    },
    me: function() {
        return me;
    },
    app: function() {
        return app;
    },
    company: function() {
        return company;
    }
});
const _auth = require("@whop-apps/auth");
const _core = require("@whop-apps/core");
const _typedapi = require("@whop-apps/typed-api");
const makeApi = ({ baseHeaders, customClientOptions })=>{
    const headers = (0, _typedapi.mergeHeaders)(baseHeaders, customClientOptions?.headers);
    const client = (0, _typedapi.createClient)({
        baseUrl: "https://api.whop.com/api/v5",
        ...customClientOptions,
        headers
    });
    return client;
};
function hasGetTokenParams(test) {
    return "headers" in test || "req" in test || "token" in test;
}
function me(opts) {
    const userToken = hasGetTokenParams(opts) ? (0, _auth.getToken)({
        ...opts,
        dontThrow: true
    }) : null;
    if (!userToken && typeof window === "undefined") {
        const returnError = ()=>Promise.resolve((0, _core.Err)(new _typedapi.FetchError("No user token provided"), {
                response: null
            }));
        return {
            GET: returnError,
            PUT: returnError,
            POST: returnError,
            DELETE: returnError,
            OPTIONS: returnError,
            HEAD: returnError,
            PATCH: returnError,
            TRACE: returnError
        };
    }
    const client = makeApi({
        baseHeaders: {
            Authorization: `Bearer ${userToken}`
        },
        availability: "me",
        customClientOptions: opts ? {
            ...opts,
            headers: opts.customHeaders,
            ...typeof window !== "undefined" && {
                baseUrl: "/_whop/api/v5"
            }
        } : undefined
    });
    return client;
}
function app(opts) {
    const apiKey = _core.WhopEnvStore.get(_core.WhopEnv.API_KEY, opts?.apiKey);
    const client = makeApi({
        baseHeaders: {
            Authorization: `Bearer ${apiKey}`
        },
        availability: "app",
        customClientOptions: opts
    });
    return client;
}
function company(opts) {
    const apiKey = _core.WhopEnvStore.get(_core.WhopEnv.COMPANY_API_KEY, opts?.apiKey);
    const client = makeApi({
        baseHeaders: {
            Authorization: `Bearer ${apiKey}`
        },
        availability: "company",
        customClientOptions: opts
    });
    return client;
}
