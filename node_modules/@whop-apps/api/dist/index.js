"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    WhopAPI: function() {
        return WhopAPI;
    },
    makeWebhookHandler: function() {
        return makeWebhookHandler;
    },
    and: function() {
        return _access.and;
    },
    authorizedUserOn: function() {
        return _access.authorizedUserOn;
    },
    hasAccess: function() {
        return _access.hasAccess;
    },
    isAccessStringValid: function() {
        return _access.isAccessStringValid;
    },
    isAuthenticated: function() {
        return _access.isAuthenticated;
    },
    makeAccessString: function() {
        return _access.makeAccessString;
    },
    not: function() {
        return _access.not;
    },
    or: function() {
        return _access.or;
    },
    parseAccessString: function() {
        return _access.parseAccessString;
    }
});
const _core = require("@whop-apps/core");
const _typedapi = require("@whop-apps/typed-api");
const _api = require("./api");
const _lastactivity = require("./last-activity");
const _notifications = require("./notifications");
const _access = require("./access");
const WhopAPI = {
    /**
	 * ## Me Mode
	 * Use "me" mode to make requests on behalf of a user.
	 *
	 * You must provide a valid user JWT token. You can do this by passing it
	 * directly as a string, or by passing a headers or request object from which
	 * the SDK can extract from the incoming cookie header.
	 *
	 * ```ts
	 * import { WhopAPI } from '@whop-apps/api';
	 *
	 * export const GET = async (req: NextRequest) => {
	 *  const me = await WhopAPI.me({ req }).GET("/me", {});
	 *  return me;
	 * }
	 * ```
	 */ me: _api.me,
    /**
	 * ## App Mode
	 * Use "app" mode to make requests on behalf of the app using your api key.
	 *
	 * You may provide your api, by default the SDK will look for it in the
	 * `WHOP_API_KEY` environment variable.
	 *
	 * ```ts
	 * import { WhopAPI } from '@whop-apps/api';
	 *
	 * export const GET = async (req: NextRequest) => {
	 *   const user = await WhopAPI.app().GET("/app/users/{id}", { params: { path: { id: "user_XXXXXX" } } });
	 *   return user;
	 * }
	 * ```
	 */ app: _api.app,
    /**
	 * ## Company Mode
	 * Use "company" mode to make requests on behalf of your company using your api key.
	 *
	 * You may provide your api, by default the SDK will look for it in the
	 * `WHOP_COMPANY_API_KEY` environment variable.
	 *
	 * ```ts
	 * import { WhopAPI } from '@whop-apps/api';
	 *
	 * export const GET = async (req: NextRequest) => {
	 *   const user = await WhopAPI.company().GET("/company/users/{id}", { params: { path: { id: "user_XXXXXX" } } });
	 *   return user;
	 * }
	 * ```
	 */ company: _api.company,
    notifications: _notifications.notifications,
    lastActivity: _lastactivity.lastActivity,
    ...(0, _api.makeApi)({
        availability: "misc",
        baseHeaders: {}
    })
};
const makeWebhookHandler = ({ signatureKey } = {})=>(0, _typedapi.createWebhookHandler)({
        signatureHeaderName: "X-Whop-Signature",
        signatureKey: _core.WhopEnvStore.get(_core.WhopEnv.WEBHOOK_KEY, signatureKey)
    }).postHandler;
