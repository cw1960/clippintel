"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "OAuthApi", {
    enumerable: true,
    get: function() {
        return OAuthApi;
    }
});
const _core = require("@whop-apps/core");
const _typedapi = require("@whop-apps/typed-api");
function OAuthApi({ mode, fetch, headers, auth, autoIncludeAuthHeader, baseUrl, userToken }) {
    const combinedHeaders = {};
    if (autoIncludeAuthHeader !== false && !auth && mode === "server") {
        combinedHeaders.Authorization = `Bearer ${_core.WhopEnvStore.get(_core.WhopEnv.API_KEY)}`;
    }
    if (headers) {
        const appId = headers().get("x-whop-app-id");
        if (appId) combinedHeaders["x-whop-app-id"] = appId;
    }
    if (userToken) {
        combinedHeaders["x-whop-user-token"] = userToken;
    }
    const defaultBaseUrl = mode === "client" ? "/_whop/oauth" : process.env?.OAUTH_LOCAL ? "http://localhost:8787" : "https://oauth.api.whop.com";
    const api = (0, _typedapi.createClient)({
        baseUrl: baseUrl ?? defaultBaseUrl,
        headers: combinedHeaders,
        fetch
    });
    return {
        ...api,
        async createCredentials ({ client_id, client_secret, provider }) {
            const res = await api.PUT("/api/v1/credentials/{provider}", {
                params: {
                    path: {
                        provider
                    }
                },
                body: {
                    client_id,
                    client_secret
                }
            });
            return res.unwrap();
        },
        // list profiles -- return all token profiles without
        // doing refresh logic
        async listProfiles ({ provider, user_id }) {
            const res = await api.GET("/api/v1/users/{user_id}/providers/{provider}", {
                params: {
                    path: {
                        provider,
                        user_id
                    }
                }
            });
            return res.unwrap();
        },
        async retrieveToken ({ provider, user_id, profile_id }) {
            const res = await api.GET("/api/v1/users/{user_id}/providers/{provider}/tokens/{profile_id}", {
                params: {
                    path: {
                        profile_id,
                        provider,
                        user_id
                    }
                }
            });
            return res.unwrap();
        }
    };
}
