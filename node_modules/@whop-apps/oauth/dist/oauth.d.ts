import type { paths } from "./schema";
export type OAuthApiOptions = {
    mode: "client" | "server";
    baseUrl?: string;
    autoIncludeAuthHeader?: boolean;
    auth?: string;
    headers?: () => Headers;
    fetch?: typeof fetch;
    userToken?: string;
};
export type OauthProvider = paths["/api/v1/users/{user_id}/providers/{provider}/tokens/{profile_id}"]["get"]["responses"]["200"]["content"]["application/json"]["provider"];
export declare function OAuthApi({ mode, fetch, headers, auth, autoIncludeAuthHeader, baseUrl, userToken, }: OAuthApiOptions): {
    createCredentials({ client_id, client_secret, provider, }: {
        provider: OauthProvider;
        client_id: string;
        client_secret: string;
    }): Promise<{
        success: true;
    }>;
    listProfiles({ provider, user_id, }: {
        provider: OauthProvider;
        user_id: string;
    }): Promise<{
        app_id: string;
        user_id: string;
        provider: "google" | "zoom";
        profile_id: string;
        user_data: {
            id: string;
            photo_url: string;
            name: string;
        };
        raw_user_data: {
            [key: string]: unknown;
        };
    }[]>;
    retrieveToken({ provider, user_id, profile_id, }: {
        provider: OauthProvider;
        user_id: string;
        profile_id: string;
    }): Promise<{
        user_id: string;
        app_id: string;
        provider: "google" | "zoom";
        profile_id: string;
        access_token: string;
        user_data: {
            id: string;
            photo_url: string;
            name: string;
        };
        raw_user_data: {
            [key: string]: unknown;
        };
    }>;
    GET<P extends import("@whop-apps/typed-api/dist/rest/type-helpers").PathsWithMethod<paths, "get">>(url: P, init: import("@whop-apps/typed-api/dist/rest/type-helpers").MakeObjectsWithoutRequiredKeysOptional<import("@whop-apps/typed-api").FetchOptions<import("@whop-apps/typed-api/dist/rest/type-helpers").FilterKeys<paths[P], "get">>>): Promise<import("@whop-apps/typed-api").FetchResponse<"get" extends keyof paths[P] ? paths[P][keyof paths[P] & "get"] : unknown>>;
    PUT<P_1 extends "/api/v1/credentials/{provider}">(url: P_1, init: import("@whop-apps/typed-api/dist/rest/type-helpers").MakeObjectsWithoutRequiredKeysOptional<import("@whop-apps/typed-api").FetchOptions<import("@whop-apps/typed-api/dist/rest/type-helpers").FilterKeys<paths[P_1], "put">>>): Promise<import("@whop-apps/typed-api").FetchResponse<"put" extends keyof paths[P_1] ? paths[P_1][keyof paths[P_1] & "put"] : unknown>>;
    POST<P_2 extends never>(url: P_2, init: import("@whop-apps/typed-api/dist/rest/type-helpers").MakeObjectsWithoutRequiredKeysOptional<import("@whop-apps/typed-api").FetchOptions<import("@whop-apps/typed-api/dist/rest/type-helpers").FilterKeys<paths[P_2], "post">>>): Promise<import("@whop-apps/typed-api").FetchResponse<"post" extends keyof paths[P_2] ? paths[P_2][keyof paths[P_2] & "post"] : unknown>>;
    DELETE<P_3 extends never>(url: P_3, init: import("@whop-apps/typed-api/dist/rest/type-helpers").MakeObjectsWithoutRequiredKeysOptional<import("@whop-apps/typed-api").FetchOptions<import("@whop-apps/typed-api/dist/rest/type-helpers").FilterKeys<paths[P_3], "delete">>>): Promise<import("@whop-apps/typed-api").FetchResponse<"delete" extends keyof paths[P_3] ? paths[P_3][keyof paths[P_3] & "delete"] : unknown>>;
    OPTIONS<P_4 extends never>(url: P_4, init: import("@whop-apps/typed-api/dist/rest/type-helpers").MakeObjectsWithoutRequiredKeysOptional<import("@whop-apps/typed-api").FetchOptions<import("@whop-apps/typed-api/dist/rest/type-helpers").FilterKeys<paths[P_4], "options">>>): Promise<import("@whop-apps/typed-api").FetchResponse<"options" extends keyof paths[P_4] ? paths[P_4][keyof paths[P_4] & "options"] : unknown>>;
    HEAD<P_5 extends never>(url: P_5, init: import("@whop-apps/typed-api/dist/rest/type-helpers").MakeObjectsWithoutRequiredKeysOptional<import("@whop-apps/typed-api").FetchOptions<import("@whop-apps/typed-api/dist/rest/type-helpers").FilterKeys<paths[P_5], "head">>>): Promise<import("@whop-apps/typed-api").FetchResponse<"head" extends keyof paths[P_5] ? paths[P_5][keyof paths[P_5] & "head"] : unknown>>;
    PATCH<P_6 extends never>(url: P_6, init: import("@whop-apps/typed-api/dist/rest/type-helpers").MakeObjectsWithoutRequiredKeysOptional<import("@whop-apps/typed-api").FetchOptions<import("@whop-apps/typed-api/dist/rest/type-helpers").FilterKeys<paths[P_6], "patch">>>): Promise<import("@whop-apps/typed-api").FetchResponse<"patch" extends keyof paths[P_6] ? paths[P_6][keyof paths[P_6] & "patch"] : unknown>>;
    TRACE<P_7 extends never>(url: P_7, init: import("@whop-apps/typed-api/dist/rest/type-helpers").MakeObjectsWithoutRequiredKeysOptional<import("@whop-apps/typed-api").FetchOptions<import("@whop-apps/typed-api/dist/rest/type-helpers").FilterKeys<paths[P_7], "trace">>>): Promise<import("@whop-apps/typed-api").FetchResponse<"trace" extends keyof paths[P_7] ? paths[P_7][keyof paths[P_7] & "trace"] : unknown>>;
};
//# sourceMappingURL=oauth.d.ts.map