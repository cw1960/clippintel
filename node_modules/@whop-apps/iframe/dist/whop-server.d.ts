import { z } from "zod";
export declare const whopServerSchema: z.ZodDiscriminatedUnion<"event", [z.ZodObject<{
    event: z.ZodLiteral<"ping">;
    request: z.ZodLiteral<"ping">;
    response: z.ZodLiteral<"pong">;
}, "strip", z.ZodTypeAny, {
    event: "ping";
    request: "ping";
    response: "pong";
}, {
    event: "ping";
    request: "ping";
    response: "pong";
}>, z.ZodObject<{
    event: z.ZodLiteral<"getExperiences">;
    request: z.ZodOptional<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
    response: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        accessLevel: z.ZodEnum<["public", "members", "private"]>;
        app: z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            icon: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            name: string;
            icon: string;
        }, {
            id: string;
            name: string;
            icon: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        name: string;
        accessLevel: "public" | "members" | "private";
        app: {
            id: string;
            name: string;
            icon: string;
        };
    }, {
        id: string;
        name: string;
        accessLevel: "public" | "members" | "private";
        app: {
            id: string;
            name: string;
            icon: string;
        };
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    event: "getExperiences";
    response: {
        id: string;
        name: string;
        accessLevel: "public" | "members" | "private";
        app: {
            id: string;
            name: string;
            icon: string;
        };
    }[];
    request?: {} | undefined;
}, {
    event: "getExperiences";
    response: {
        id: string;
        name: string;
        accessLevel: "public" | "members" | "private";
        app: {
            id: string;
            name: string;
            icon: string;
        };
    }[];
    request?: {} | undefined;
}>, z.ZodObject<{
    event: z.ZodLiteral<"getTopLevelUrlData">;
    request: z.ZodOptional<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
    response: z.ZodObject<{
        companyRoute: z.ZodString;
        experienceRoute: z.ZodString;
        experienceId: z.ZodString;
        viewType: z.ZodEnum<["app", "admin", "analytics", "preview"]>;
        baseHref: z.ZodString;
        fullHref: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        companyRoute: string;
        experienceRoute: string;
        experienceId: string;
        viewType: "app" | "admin" | "analytics" | "preview";
        baseHref: string;
        fullHref: string;
    }, {
        companyRoute: string;
        experienceRoute: string;
        experienceId: string;
        viewType: "app" | "admin" | "analytics" | "preview";
        baseHref: string;
        fullHref: string;
    }>;
}, "strip", z.ZodTypeAny, {
    event: "getTopLevelUrlData";
    response: {
        companyRoute: string;
        experienceRoute: string;
        experienceId: string;
        viewType: "app" | "admin" | "analytics" | "preview";
        baseHref: string;
        fullHref: string;
    };
    request?: {} | undefined;
}, {
    event: "getTopLevelUrlData";
    response: {
        companyRoute: string;
        experienceRoute: string;
        experienceId: string;
        viewType: "app" | "admin" | "analytics" | "preview";
        baseHref: string;
        fullHref: string;
    };
    request?: {} | undefined;
}>, z.ZodObject<{
    event: z.ZodLiteral<"openExternalUrl">;
    request: z.ZodObject<{
        newTab: z.ZodOptional<z.ZodBoolean>;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        url: string;
        newTab?: boolean | undefined;
    }, {
        url: string;
        newTab?: boolean | undefined;
    }>;
    response: z.ZodLiteral<"ok">;
}, "strip", z.ZodTypeAny, {
    event: "openExternalUrl";
    request: {
        url: string;
        newTab?: boolean | undefined;
    };
    response: "ok";
}, {
    event: "openExternalUrl";
    request: {
        url: string;
        newTab?: boolean | undefined;
    };
    response: "ok";
}>, z.ZodObject<{
    event: z.ZodLiteral<"onHrefChange">;
    request: z.ZodObject<{
        href: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        href: string;
    }, {
        href: string;
    }>;
    response: z.ZodLiteral<"ok">;
}, "strip", z.ZodTypeAny, {
    event: "onHrefChange";
    request: {
        href: string;
    };
    response: "ok";
}, {
    event: "onHrefChange";
    request: {
        href: string;
    };
    response: "ok";
}>, z.ZodObject<{
    event: z.ZodLiteral<"navigate">;
    request: z.ZodObject<{
        experienceId: z.ZodOptional<z.ZodString>;
        tab: z.ZodOptional<z.ZodEnum<["admin", "app", "access", "analytics"]>>;
        rest: z.ZodOptional<z.ZodString>;
        query: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        experienceId?: string | undefined;
        tab?: "app" | "admin" | "analytics" | "access" | undefined;
        rest?: string | undefined;
        query?: string | undefined;
    }, {
        experienceId?: string | undefined;
        tab?: "app" | "admin" | "analytics" | "access" | undefined;
        rest?: string | undefined;
        query?: string | undefined;
    }>;
    response: z.ZodLiteral<"ok">;
}, "strip", z.ZodTypeAny, {
    event: "navigate";
    request: {
        experienceId?: string | undefined;
        tab?: "app" | "admin" | "analytics" | "access" | undefined;
        rest?: string | undefined;
        query?: string | undefined;
    };
    response: "ok";
}, {
    event: "navigate";
    request: {
        experienceId?: string | undefined;
        tab?: "app" | "admin" | "analytics" | "access" | undefined;
        rest?: string | undefined;
        query?: string | undefined;
    };
    response: "ok";
}>, z.ZodObject<{
    event: z.ZodLiteral<"inAppPurchase">;
    request: z.ZodObject<{
        /**
         * ID returned from the `chargeUser` API call.
         * @example "ch_1234567890"
         */
        id: z.ZodOptional<z.ZodString>;
        /**
         * ID of the plan returned from the `chargeUser` API call.
         * @example "plan_1234567890"
         */
        planId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        planId: string;
        id?: string | undefined;
    }, {
        planId: string;
        id?: string | undefined;
    }>;
    response: z.ZodDiscriminatedUnion<"status", [z.ZodObject<{
        status: z.ZodLiteral<"ok">;
        data: z.ZodObject<{
            sessionId: z.ZodString;
            /**
             * The receipt ID can be used to verify the purchase.
             *
             * NOTE: When receiving payments you should always listen to webhooks as a fallback
             * to process the payment. Do not solely rely on the client to process payments. The receipt ID
             * can be used to deduplicate payment events.
             */
            receiptId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            sessionId: string;
            receiptId: string;
        }, {
            sessionId: string;
            receiptId: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        status: "ok";
        data: {
            sessionId: string;
            receiptId: string;
        };
    }, {
        status: "ok";
        data: {
            sessionId: string;
            receiptId: string;
        };
    }>, z.ZodObject<{
        status: z.ZodLiteral<"error">;
        error: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        status: "error";
        error: string;
    }, {
        status: "error";
        error: string;
    }>]>;
}, "strip", z.ZodTypeAny, {
    event: "inAppPurchase";
    request: {
        planId: string;
        id?: string | undefined;
    };
    response: {
        status: "ok";
        data: {
            sessionId: string;
            receiptId: string;
        };
    } | {
        status: "error";
        error: string;
    };
}, {
    event: "inAppPurchase";
    request: {
        planId: string;
        id?: string | undefined;
    };
    response: {
        status: "ok";
        data: {
            sessionId: string;
            receiptId: string;
        };
    } | {
        status: "error";
        error: string;
    };
}>, z.ZodObject<{
    event: z.ZodLiteral<"closeApp">;
    request: z.ZodNull;
    response: z.ZodLiteral<"ok">;
}, "strip", z.ZodTypeAny, {
    event: "closeApp";
    request: null;
    response: "ok";
}, {
    event: "closeApp";
    request: null;
    response: "ok";
}>, z.ZodObject<{
    event: z.ZodLiteral<"openHelpChat">;
    request: z.ZodNull;
    response: z.ZodLiteral<"ok">;
}, "strip", z.ZodTypeAny, {
    event: "openHelpChat";
    request: null;
    response: "ok";
}, {
    event: "openHelpChat";
    request: null;
    response: "ok";
}>, z.ZodObject<{
    event: z.ZodLiteral<"getColorTheme">;
    request: z.ZodVoid;
    response: z.ZodObject<{
        appearance: z.ZodOptional<z.ZodEnum<["light", "dark"]>>;
        accentColor: z.ZodOptional<z.ZodString>;
        dangerColor: z.ZodOptional<z.ZodString>;
        grayColor: z.ZodOptional<z.ZodString>;
        infoColor: z.ZodOptional<z.ZodString>;
        successColor: z.ZodOptional<z.ZodString>;
        warningColor: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        appearance?: "light" | "dark" | undefined;
        accentColor?: string | undefined;
        dangerColor?: string | undefined;
        grayColor?: string | undefined;
        infoColor?: string | undefined;
        successColor?: string | undefined;
        warningColor?: string | undefined;
    }, {
        appearance?: "light" | "dark" | undefined;
        accentColor?: string | undefined;
        dangerColor?: string | undefined;
        grayColor?: string | undefined;
        infoColor?: string | undefined;
        successColor?: string | undefined;
        warningColor?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    event: "getColorTheme";
    response: {
        appearance?: "light" | "dark" | undefined;
        accentColor?: string | undefined;
        dangerColor?: string | undefined;
        grayColor?: string | undefined;
        infoColor?: string | undefined;
        successColor?: string | undefined;
        warningColor?: string | undefined;
    };
    request?: void | undefined;
}, {
    event: "getColorTheme";
    response: {
        appearance?: "light" | "dark" | undefined;
        accentColor?: string | undefined;
        dangerColor?: string | undefined;
        grayColor?: string | undefined;
        infoColor?: string | undefined;
        successColor?: string | undefined;
        warningColor?: string | undefined;
    };
    request?: void | undefined;
}>, z.ZodObject<{
    event: z.ZodLiteral<"earliestUnreadNotification">;
    request: z.ZodObject<{
        experienceId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        experienceId: string;
    }, {
        experienceId: string;
    }>;
    response: z.ZodNullable<z.ZodObject<{
        externalId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        externalId: string;
    }, {
        externalId: string;
    }>>;
}, "strip", z.ZodTypeAny, {
    event: "earliestUnreadNotification";
    request: {
        experienceId: string;
    };
    response: {
        externalId: string;
    } | null;
}, {
    event: "earliestUnreadNotification";
    request: {
        experienceId: string;
    };
    response: {
        externalId: string;
    } | null;
}>, z.ZodObject<{
    event: z.ZodLiteral<"markExperienceRead">;
    request: z.ZodObject<{
        experienceId: z.ZodString;
        notificationExternalId: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        experienceId: string;
        notificationExternalId?: string | undefined;
    }, {
        experienceId: string;
        notificationExternalId?: string | undefined;
    }>;
    response: z.ZodLiteral<"ok">;
}, "strip", z.ZodTypeAny, {
    event: "markExperienceRead";
    request: {
        experienceId: string;
        notificationExternalId?: string | undefined;
    };
    response: "ok";
}, {
    event: "markExperienceRead";
    request: {
        experienceId: string;
        notificationExternalId?: string | undefined;
    };
    response: "ok";
}>, z.ZodObject<{
    event: z.ZodLiteral<"performHaptic">;
    request: z.ZodObject<{
        type: z.ZodEnum<["selection", "impact", "notification"]>;
        style: z.ZodEnum<["light", "medium", "heavy"]>;
    }, "strip", z.ZodTypeAny, {
        type: "selection" | "impact" | "notification";
        style: "light" | "medium" | "heavy";
    }, {
        type: "selection" | "impact" | "notification";
        style: "light" | "medium" | "heavy";
    }>;
    response: z.ZodLiteral<"ok">;
}, "strip", z.ZodTypeAny, {
    event: "performHaptic";
    request: {
        type: "selection" | "impact" | "notification";
        style: "light" | "medium" | "heavy";
    };
    response: "ok";
}, {
    event: "performHaptic";
    request: {
        type: "selection" | "impact" | "notification";
        style: "light" | "medium" | "heavy";
    };
    response: "ok";
}>, z.ZodObject<{
    event: z.ZodLiteral<"unlockExperience">;
    request: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        productId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        productId: string;
    }, {
        productId: string;
    }>, z.ZodObject<{
        planId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        planId: string;
    }, {
        planId: string;
    }>]>>;
    response: z.ZodDiscriminatedUnion<"status", [z.ZodObject<{
        status: z.ZodLiteral<"ok">;
        data: z.ZodLiteral<"ok">;
    }, "strip", z.ZodTypeAny, {
        status: "ok";
        data: "ok";
    }, {
        status: "ok";
        data: "ok";
    }>, z.ZodObject<{
        status: z.ZodLiteral<"error">;
        error: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        status: "error";
        error: string;
    }, {
        status: "error";
        error: string;
    }>]>;
}, "strip", z.ZodTypeAny, {
    event: "unlockExperience";
    response: {
        status: "ok";
        data: "ok";
    } | {
        status: "error";
        error: string;
    };
    request?: {
        productId: string;
    } | {
        planId: string;
    } | undefined;
}, {
    event: "unlockExperience";
    response: {
        status: "ok";
        data: "ok";
    } | {
        status: "error";
        error: string;
    };
    request?: {
        productId: string;
    } | {
        planId: string;
    } | undefined;
}>, z.ZodObject<{
    event: z.ZodLiteral<"promptJoin">;
    request: z.ZodVoid;
    response: z.ZodDiscriminatedUnion<"status", [z.ZodObject<{
        status: z.ZodLiteral<"ok">;
        data: z.ZodLiteral<"ok">;
    }, "strip", z.ZodTypeAny, {
        status: "ok";
        data: "ok";
    }, {
        status: "ok";
        data: "ok";
    }>, z.ZodObject<{
        status: z.ZodLiteral<"error">;
        error: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        status: "error";
        error: string;
    }, {
        status: "error";
        error: string;
    }>]>;
}, "strip", z.ZodTypeAny, {
    event: "promptJoin";
    response: {
        status: "ok";
        data: "ok";
    } | {
        status: "error";
        error: string;
    };
    request?: void | undefined;
}, {
    event: "promptJoin";
    response: {
        status: "ok";
        data: "ok";
    } | {
        status: "error";
        error: string;
    };
    request?: void | undefined;
}>, z.ZodObject<{
    event: z.ZodLiteral<"invalidTokenDetected">;
    request: z.ZodNull;
    response: z.ZodLiteral<"ok">;
}, "strip", z.ZodTypeAny, {
    event: "invalidTokenDetected";
    request: null;
    response: "ok";
}, {
    event: "invalidTokenDetected";
    request: null;
    response: "ok";
}>]>;
export type WhopServerSchema = z.TypeOf<typeof whopServerSchema>;
//# sourceMappingURL=whop-server.d.ts.map