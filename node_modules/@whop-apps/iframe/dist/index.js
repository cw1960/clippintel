"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    appsServerSchema: function() {
        return _appsserver.appsServerSchema;
    },
    whopServerSchema: function() {
        return _whopserver.whopServerSchema;
    },
    createAppIframeSDK: function() {
        return createAppIframeSDK;
    },
    createWhopIframeSDK: function() {
        return createWhopIframeSDK;
    }
});
const _appsserver = require("./apps-server");
const _whopserver = require("./whop-server");
const _core = require("@whop-apps/core");
const _typedtransport = require("@whop-apps/typed-transport");
const _postmessage = require("@whop-apps/typed-transport/dist/postmessage");
const _mobileapppostmessage = require("./mobile-app-postmessage");
const _synchref = require("./sync-href");
function setColorTheme(theme) {
    document.documentElement.dispatchEvent(new CustomEvent("frosted-ui:set-theme", {
        detail: theme
    }));
}
function createAppIframeSDK({ onMessage, appId, overrideParentOrigins }) {
    const mobileWebView = (0, _mobileapppostmessage.getSwiftPostMessage)() ?? (0, _mobileapppostmessage.getReactNativePostMessage)();
    const remoteWindow = typeof window === "undefined" ? undefined : window.parent;
    const sdk = (0, _typedtransport.createSDK)({
        clientSchema: _whopserver.whopServerSchema,
        serverSchema: _appsserver.appsServerSchema,
        forceCompleteness: false,
        serverImplementation: onMessage,
        localAppId: _core.WhopEnvStore.get(_core.WhopEnv.APP_ID, appId),
        remoteAppId: "app_whop",
        transport: mobileWebView ? (0, _postmessage.reactNativeClientTransport)({
            postMessage: mobileWebView,
            targetOrigin: "com.whop.whopapp"
        }) : (0, _typedtransport.postmessageTransport)({
            remoteWindow,
            targetOrigins: overrideParentOrigins ?? [
                "https://whop.com",
                "https://dash.whop.com",
                "http://localhost:8003"
            ]
        }),
        serverComplete: true,
        serverMiddleware: [
            {
                onColorThemeChange: setColorTheme
            }
        ],
        timeout: 15000,
        timeouts: {
            unlockExperience: 1000 * 60 * 60 * 24,
            promptJoin: 1000 * 60 * 60 * 24,
            inAppPurchase: 1000 * 60 * 60 * 24,
            onHrefChange: 500
        }
    });
    if (typeof window !== "undefined") {
        sdk.getColorTheme().then(setColorTheme).catch(()=>null);
        document.documentElement.addEventListener("frosted-ui:mounted", ()=>{
            sdk.getColorTheme().then(setColorTheme).catch(()=>null);
        });
    }
    (0, _synchref.syncHref)({
        onChange: sdk.onHrefChange
    });
    return sdk;
}
function createWhopIframeSDK({ appId, onMessage, remoteWindow, remoteOrigin }) {
    return (0, _typedtransport.createSDK)({
        clientSchema: _appsserver.appsServerSchema,
        serverSchema: _whopserver.whopServerSchema,
        forceCompleteness: true,
        serverImplementation: onMessage,
        localAppId: "app_whop",
        remoteAppId: appId,
        transport: (0, _typedtransport.postmessageTransport)({
            remoteWindow: remoteWindow,
            targetOrigins: [
                remoteOrigin
            ]
        }),
        serverComplete: false,
        timeout: 200,
        timeouts: {
            onCheckoutRequirementComplete: 10000
        }
    });
}
