import { type ZodSchema, z } from "zod";
export declare const withError: <T extends ZodSchema<any, z.ZodTypeDef, any>, E extends ZodSchema<any, z.ZodTypeDef, any>>(schema: T, error: E) => z.ZodDiscriminatedUnion<"status", [z.ZodObject<{
    status: z.ZodLiteral<"ok">;
    data: T;
}, "strip", z.ZodTypeAny, { [k_1 in keyof z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
    status: z.ZodLiteral<"ok">;
    data: T;
}>, "status" | (undefined extends T["_output"] ? never : "data")>]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
    status: z.ZodLiteral<"ok">;
    data: T;
}>, "status" | (undefined extends T["_output"] ? never : "data")>[k_1]; }, { [k_2 in keyof z.baseObjectInputType<{
    status: z.ZodLiteral<"ok">;
    data: T;
}>]: z.baseObjectInputType<{
    status: z.ZodLiteral<"ok">;
    data: T;
}>[k_2]; }>, z.ZodObject<{
    status: z.ZodLiteral<"error">;
    error: E;
}, "strip", z.ZodTypeAny, { [k_1_1 in keyof z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
    status: z.ZodLiteral<"error">;
    error: E;
}>, "status" | (undefined extends E["_output"] ? never : "error")>]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
    status: z.ZodLiteral<"error">;
    error: E;
}>, "status" | (undefined extends E["_output"] ? never : "error")>[k_1_1]; }, { [k_2_1 in keyof z.baseObjectInputType<{
    status: z.ZodLiteral<"error">;
    error: E;
}>]: z.baseObjectInputType<{
    status: z.ZodLiteral<"error">;
    error: E;
}>[k_2_1]; }>]>;
export declare const frostedV2Theme: z.ZodObject<{
    appearance: z.ZodOptional<z.ZodEnum<["light", "dark"]>>;
    accentColor: z.ZodOptional<z.ZodString>;
    dangerColor: z.ZodOptional<z.ZodString>;
    grayColor: z.ZodOptional<z.ZodString>;
    infoColor: z.ZodOptional<z.ZodString>;
    successColor: z.ZodOptional<z.ZodString>;
    warningColor: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    appearance?: "light" | "dark" | undefined;
    accentColor?: string | undefined;
    dangerColor?: string | undefined;
    grayColor?: string | undefined;
    infoColor?: string | undefined;
    successColor?: string | undefined;
    warningColor?: string | undefined;
}, {
    appearance?: "light" | "dark" | undefined;
    accentColor?: string | undefined;
    dangerColor?: string | undefined;
    grayColor?: string | undefined;
    infoColor?: string | undefined;
    successColor?: string | undefined;
    warningColor?: string | undefined;
}>;
//# sourceMappingURL=utils.d.ts.map