"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "whopServerSchema", {
    enumerable: true,
    get: function() {
        return whopServerSchema;
    }
});
const _zod = require("zod");
const _utils = require("./utils");
const whopServerSchema = _zod.z.discriminatedUnion("event", [
    _zod.z.object({
        event: _zod.z.literal("ping"),
        request: _zod.z.literal("ping"),
        response: _zod.z.literal("pong")
    }),
    _zod.z.object({
        event: _zod.z.literal("getExperiences"),
        request: _zod.z.object({}).optional(),
        response: _zod.z.object({
            id: _zod.z.string(),
            name: _zod.z.string(),
            accessLevel: _zod.z.enum([
                "public",
                "members",
                "private"
            ]),
            app: _zod.z.object({
                id: _zod.z.string(),
                name: _zod.z.string(),
                icon: _zod.z.string()
            })
        }).array()
    }),
    _zod.z.object({
        event: _zod.z.literal("getTopLevelUrlData"),
        request: _zod.z.object({}).optional(),
        response: _zod.z.object({
            companyRoute: _zod.z.string(),
            experienceRoute: _zod.z.string(),
            experienceId: _zod.z.string(),
            viewType: _zod.z.enum([
                "app",
                "admin",
                "analytics",
                "preview"
            ]),
            baseHref: _zod.z.string(),
            fullHref: _zod.z.string()
        })
    }),
    _zod.z.object({
        event: _zod.z.literal("openExternalUrl"),
        request: _zod.z.object({
            newTab: _zod.z.boolean().optional(),
            url: _zod.z.string()
        }),
        response: _zod.z.literal("ok")
    }),
    _zod.z.object({
        event: _zod.z.literal("onHrefChange"),
        request: _zod.z.object({
            href: _zod.z.string()
        }),
        response: _zod.z.literal("ok")
    }),
    _zod.z.object({
        event: _zod.z.literal("navigate"),
        request: _zod.z.object({
            experienceId: _zod.z.string().optional(),
            tab: _zod.z.enum([
                "admin",
                "app",
                "access",
                "analytics"
            ]).optional(),
            rest: _zod.z.string().optional(),
            query: _zod.z.string().optional()
        }),
        response: _zod.z.literal("ok")
    }),
    _zod.z.object({
        event: _zod.z.literal("inAppPurchase"),
        request: _zod.z.object({
            /**
			 * ID returned from the `chargeUser` API call.
			 * @example "ch_1234567890"
			 */ id: _zod.z.string().optional(),
            /**
			 * ID of the plan returned from the `chargeUser` API call.
			 * @example "plan_1234567890"
			 */ planId: _zod.z.string()
        }),
        response: (0, _utils.withError)(_zod.z.object({
            sessionId: _zod.z.string(),
            /**
				 * The receipt ID can be used to verify the purchase.
				 *
				 * NOTE: When receiving payments you should always listen to webhooks as a fallback
				 * to process the payment. Do not solely rely on the client to process payments. The receipt ID
				 * can be used to deduplicate payment events.
				 */ receiptId: _zod.z.string()
        }), _zod.z.string())
    }),
    _zod.z.object({
        event: _zod.z.literal("closeApp"),
        request: _zod.z.null(),
        response: _zod.z.literal("ok")
    }),
    _zod.z.object({
        event: _zod.z.literal("openHelpChat"),
        request: _zod.z.null(),
        response: _zod.z.literal("ok")
    }),
    _zod.z.object({
        event: _zod.z.literal("getColorTheme"),
        request: _zod.z.void(),
        response: _utils.frostedV2Theme
    }),
    _zod.z.object({
        event: _zod.z.literal("earliestUnreadNotification"),
        request: _zod.z.object({
            experienceId: _zod.z.string()
        }),
        response: _zod.z.object({
            externalId: _zod.z.string()
        }).nullable()
    }),
    _zod.z.object({
        event: _zod.z.literal("markExperienceRead"),
        request: _zod.z.object({
            experienceId: _zod.z.string(),
            notificationExternalId: _zod.z.string().optional()
        }),
        response: _zod.z.literal("ok")
    }),
    _zod.z.object({
        event: _zod.z.literal("performHaptic"),
        request: _zod.z.object({
            type: _zod.z.enum([
                "selection",
                "impact",
                "notification"
            ]),
            style: _zod.z.enum([
                "light",
                "medium",
                "heavy"
            ])
        }),
        response: _zod.z.literal("ok")
    }),
    _zod.z.object({
        event: _zod.z.literal("unlockExperience"),
        request: _zod.z.union([
            _zod.z.object({
                productId: _zod.z.string()
            }),
            _zod.z.object({
                planId: _zod.z.string()
            })
        ]).optional(),
        response: (0, _utils.withError)(_zod.z.literal("ok"), _zod.z.string())
    }),
    _zod.z.object({
        event: _zod.z.literal("promptJoin"),
        request: _zod.z.void(),
        response: (0, _utils.withError)(_zod.z.literal("ok"), _zod.z.string())
    }),
    _zod.z.object({
        event: _zod.z.literal("invalidTokenDetected"),
        request: _zod.z.null(),
        response: _zod.z.literal("ok")
    })
]);
