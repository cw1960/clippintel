import { z } from "zod";
export declare const appsServerSchema: z.ZodDiscriminatedUnion<"event", [z.ZodObject<{
    event: z.ZodLiteral<"appPing">;
    request: z.ZodLiteral<"app_ping">;
    response: z.ZodLiteral<"app_pong">;
}, "strip", z.ZodTypeAny, {
    event: "appPing";
    request: "app_ping";
    response: "app_pong";
}, {
    event: "appPing";
    request: "app_ping";
    response: "app_pong";
}>, z.ZodObject<{
    event: z.ZodLiteral<"onCheckoutRequirementComplete">;
    request: z.ZodObject<{
        checkoutSessionId: z.ZodString;
        planId: z.ZodString;
        productId: z.ZodString;
        companyId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        checkoutSessionId: string;
        planId: string;
        productId: string;
        companyId: string;
    }, {
        checkoutSessionId: string;
        planId: string;
        productId: string;
        companyId: string;
    }>;
    response: z.ZodObject<{
        shouldContinue: z.ZodBoolean;
        error: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        shouldContinue: boolean;
        error?: string | undefined;
    }, {
        shouldContinue: boolean;
        error?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    event: "onCheckoutRequirementComplete";
    request: {
        checkoutSessionId: string;
        planId: string;
        productId: string;
        companyId: string;
    };
    response: {
        shouldContinue: boolean;
        error?: string | undefined;
    };
}, {
    event: "onCheckoutRequirementComplete";
    request: {
        checkoutSessionId: string;
        planId: string;
        productId: string;
        companyId: string;
    };
    response: {
        shouldContinue: boolean;
        error?: string | undefined;
    };
}>, z.ZodObject<{
    event: z.ZodLiteral<"onColorThemeChange">;
    request: z.ZodObject<{
        appearance: z.ZodOptional<z.ZodEnum<["light", "dark"]>>;
        accentColor: z.ZodOptional<z.ZodString>;
        dangerColor: z.ZodOptional<z.ZodString>;
        grayColor: z.ZodOptional<z.ZodString>;
        infoColor: z.ZodOptional<z.ZodString>;
        successColor: z.ZodOptional<z.ZodString>;
        warningColor: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        appearance?: "light" | "dark" | undefined;
        accentColor?: string | undefined;
        dangerColor?: string | undefined;
        grayColor?: string | undefined;
        infoColor?: string | undefined;
        successColor?: string | undefined;
        warningColor?: string | undefined;
    }, {
        appearance?: "light" | "dark" | undefined;
        accentColor?: string | undefined;
        dangerColor?: string | undefined;
        grayColor?: string | undefined;
        infoColor?: string | undefined;
        successColor?: string | undefined;
        warningColor?: string | undefined;
    }>;
    response: z.ZodVoid;
}, "strip", z.ZodTypeAny, {
    event: "onColorThemeChange";
    request: {
        appearance?: "light" | "dark" | undefined;
        accentColor?: string | undefined;
        dangerColor?: string | undefined;
        grayColor?: string | undefined;
        infoColor?: string | undefined;
        successColor?: string | undefined;
        warningColor?: string | undefined;
    };
    response?: void | undefined;
}, {
    event: "onColorThemeChange";
    request: {
        appearance?: "light" | "dark" | undefined;
        accentColor?: string | undefined;
        dangerColor?: string | undefined;
        grayColor?: string | undefined;
        infoColor?: string | undefined;
        successColor?: string | undefined;
        warningColor?: string | undefined;
    };
    response?: void | undefined;
}>]>;
export type AppsServerSchema = z.TypeOf<typeof appsServerSchema>;
//# sourceMappingURL=apps-server.d.ts.map